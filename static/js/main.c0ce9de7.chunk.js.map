{"version":3,"sources":["components/films/FilmOverlay.js","components/layout/Header.js","components/layout/Searchbox.js","components/layout/RadioButton.js","components/filters/FilterByRuntime.js","components/layout/Dropdown.js","components/filters/FilterByDecade.js","components/layout/Checkbox.js","components/filters/FilterByGenre.js","components/filters/FilterByWatched.js","components/films/FilmCard.js","components/layout/Pagination.js","components/layout/Footer.js","App.js","serviceWorker.js","index.js"],"names":["FilmOverlay","this","props","handleToggleOverlay","trailer","id","onClick","className","title","itemProp","width","height","src","frameBorder","allow","allowFullScreen","Component","Header","Searchbox","handleChange","searchText","handleAutocomplete","handleSubmit","showFilm","suggestedFilms","onSubmit","htmlFor","placeholder","aria-label","type","value","onChange","onKeyUp","autoComplete","length","map","f","key","year","RadioButton","runtime","runtimeText","runtimeId","checkedRuntime","selectedRuntime","name","defaultChecked","FilterByRuntime","state","runtimes","handleFilterByRuntime","e","r","index","Dropdown","decade","FilterByDecade","decades","handleFilterByDecade","oldestDecade","newestDecade","defaultValue","d","Checkbox","genre","genres","checkedGenre","some","g","includes","FilterByGenre","expanded","genresRef","React","createRef","handleFilterByGenre","mainGenres","extraGenres","ref","setState","elementCoordinates","current","getBoundingClientRect","window","scrollTo","Math","round","y","toggleExpanded","FilterByWatched","handleFilterByWatched","hideWatched","FilmCard","director","watched","whereToWatch","convertTime","toggleFilmWatched","handleFilterByYear","handleFilterByDirector","fullTime","alt","itemScope","href","Pagination","allRecords","itemsPerPage","changePage","currentPage","totalPages","ceil","pageRange","i","push","film","Footer","App","toggleWatched","showFilter","filterName","activeFilter","runtimeFilter","filmRuntime","genreFilter","watchedFilter","yearFilter","directorFilter","submittedFilter","submitted","submittedQuery","toLowerCase","suggestedFilter","chainFilters","films","filters","filter","parseInt","max","apply","filteredFilms","selectedId","selectedYear","selectedDirector","filterTriggered","filmYears","floor","min","filterWatched","target","selectedIndex","document","querySelector","scrollToSection","goToFilms","indexOf","splice","overlay","time","hours","updatedFilms","forEach","resetProperty","suggestions","searchItem","startsWith","event","preventDefault","loading","contentPerPage","resultsRef","axios","get","then","response","maxRuntime","data","sort","catch","error","filmsperPage","slice","rel","integrity","crossOrigin","Spinner","animation","role","Boolean","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","registration","unregister","console","message"],"mappings":"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","file":"static/js/main.c0ce9de7.chunk.js","sourcesContent":["import React, { Component } from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\nexport class FilmOverlay extends Component {\r\n    static propTypes = {\r\n        handleToggleOverlay: PropTypes.func.isRequired,\r\n        trailer: PropTypes.string.isRequired\r\n    }\r\n\r\n    render() {\r\n        const { handleToggleOverlay, trailer } = this.props;\r\n\r\n        return (\r\n            <div id=\"overlay\" onClick={() => handleToggleOverlay()}>\r\n              <div className=\"overlay__wrapper\">\r\n                <div className=\"overlay__wrapper__video-container\">\r\n                    <iframe \r\n                        title={trailer}\r\n                        itemProp=\"trailer\"\r\n                        className=\"overlay__wrapper__video-container__video\" \r\n                        width=\"560\" \r\n                        height=\"315\" \r\n                        src={`https://www.youtube-nocookie.com/embed/${trailer}`} \r\n                        frameBorder=\"0\" \r\n                        allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" \r\n                        allowFullScreen>\r\n                    </iframe>\r\n                </div>\r\n              </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default FilmOverlay\r\n","import React, { Component } from 'react';\r\n\r\nclass Header extends Component {\r\n    render() {\r\n        return (\r\n            <div className=\"col-12 col-md-6 col-lg-6\">\r\n                <header id=\"main-header\">\r\n                    <h1 className=\"header-main\">What to Watch</h1>\r\n                </header>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Header;","import React, { Component } from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\nclass Searchbox extends Component {\r\n    static propTypes = {\r\n        handleChange: PropTypes.func.isRequired,\r\n        searchText: PropTypes.string.isRequired,\r\n        handleAutocomplete: PropTypes.func.isRequired,\r\n        handleSubmit: PropTypes.func.isRequired,\r\n        showFilm: PropTypes.func.isRequired,\r\n        suggestedFilms: PropTypes.array.isRequired\r\n    }\r\n\r\n    render() {\r\n        const { handleChange, searchText, handleAutocomplete, handleSubmit, showFilm, suggestedFilms } = this.props;\r\n\r\n        return (\r\n            <div className=\"col-12 col-md-6 col-lg-4 search-box\">\r\n                  <div className=\"search-box__container\">\r\n                    <form onSubmit={handleSubmit}>\r\n                        <label htmlFor=\"search\" className=\"hidden\">Search</label>\r\n                        <input \r\n                            placeholder=\"Enter film title\"\r\n                            id=\"search\"\r\n                            aria-label=\"search\"\r\n                            type=\"text\"  \r\n                            value={searchText} \r\n                            onChange={handleChange}\r\n                            onKeyUp={handleAutocomplete}\r\n                            autoComplete=\"off\"\r\n                        />\r\n                        <div className=\"btn-wrapper\">\r\n                            <input className=\"btn-search\" type=\"submit\" value=\"Search\" />\r\n                        </div>\r\n                        {suggestedFilms.length > 0 && \r\n                            <ul className=\"autocomplete\">\r\n                            {suggestedFilms.map((f,id) => {\r\n                                return (\r\n                                    <li onClick={() => showFilm(f.id)} className=\"film-suggestion\" key={f.id}>{f.title} <span>({f.year})</span></li>\r\n                                )\r\n                            }) \r\n                            }\r\n                            </ul>\r\n                        }\r\n                    </form>\r\n                  </div>\r\n              </div>     \r\n        )\r\n    }\r\n}\r\n\r\nexport default Searchbox\r\n","import React, { Component } from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\nclass RadioButton extends Component {\r\n    static propTypes = {\r\n        runtime: PropTypes.string.isRequired,\r\n        runtimeText: PropTypes.string.isRequired,\r\n        runtimeId: PropTypes.string.isRequired,\r\n        selectedRuntime: PropTypes.number.isRequired\r\n    }\r\n\r\n    render() {\r\n        const { runtime, runtimeText, runtimeId, selectedRuntime } = this.props;\r\n        let checkedRuntime = false;\r\n        if (runtime === selectedRuntime){\r\n            checkedRuntime = true;\r\n        }\r\n\r\n        return (\r\n            <div className=\"runtime-filter\">\r\n                <input \r\n                    type=\"radio\" \r\n                    className=\"film-times\" \r\n                    name=\"runtime\" \r\n                    id={runtimeId}\r\n                    value={runtime}\r\n                    defaultChecked={checkedRuntime}\r\n                        />\r\n                <label htmlFor={runtimeId}>{runtimeText}</label>\r\n            </div>)\r\n    }\r\n}\r\n\r\nexport default RadioButton\r\n","import React, { Component } from 'react'\r\nimport RadioButton from '../layout/RadioButton'\r\nimport PropTypes from 'prop-types'\r\n\r\nclass FilterByRuntime extends Component {\r\n    static propTypes = {\r\n        handleFilterByRuntime: PropTypes.func.isRequired,\r\n        runtime: PropTypes.number.isRequired\r\n    }\r\n\r\n    state = {\r\n        runtimes: [\r\n            {\r\n                runtime: 90,\r\n                runtimeId: \"runtime-90\",\r\n                runtimeText: \"1h 30min\"\r\n            },\r\n            {\r\n                runtime: 120,\r\n                runtimeId: \"runtime-120\",\r\n                runtimeText: \"2h\"\r\n            },\r\n            {\r\n                runtime: 150,\r\n                runtimeId: \"runtime-150\",\r\n                runtimeText: \"2h 30min\"\r\n            },\r\n            {\r\n                runtime: 180,\r\n                runtimeId: \"runtime-180\",\r\n                runtimeText: \"3h\"\r\n            },\r\n            {\r\n                runtime: this.props.runtime,\r\n                runtimeId: \"runtime-all\",\r\n                runtimeText: \"All the time in world\"\r\n            }\r\n        ]\r\n    }\r\n\r\n    render() {\r\n        const { runtime, handleFilterByRuntime } = this.props;\r\n        \r\n        return (\r\n            <div className=\"row\">\r\n                <div className=\"col-md-12\">\r\n                    <div id=\"filter-runtime\" className=\"film-filter\">\r\n                        <div id=\"runtimes\">\r\n                            <h2 className=\"filter-header\">How much time do you have?</h2>\t\r\n                                <div id=\"runtimes-filters\" onChange={(e) => handleFilterByRuntime(e)}>\r\n                                    {this.state.runtimes.map((r, index) => {\r\n                                        return (\r\n                                            <RadioButton key={index}\r\n                                                runtime={r.runtime}\r\n                                                runtimeId={r.runtimeId}\r\n                                                runtimeText={r.runtimeText}\r\n                                                selectedRuntime={runtime}\r\n                                            />\r\n                                            )                            \r\n                                    })}  \r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default FilterByRuntime\r\n","import React, { Component } from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\nclass Dropdown extends Component {\r\n    static propTypes = {\r\n        decade: PropTypes.number.isRequired\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <option value={this.props.decade}>{this.props.decade}</option>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Dropdown\r\n","import React, { Component } from \"react\";\r\nimport Dropdown from '../layout/Dropdown';\r\nimport PropTypes from \"prop-types\";\r\n\r\nclass FilterByDecade extends Component {\r\n  static propTypes = {\r\n    handleFilterByDecade: PropTypes.func.isRequired,\r\n    oldestDecade: PropTypes.number.isRequired,\r\n    newestDecade: PropTypes.number.isRequired\r\n  };\r\n\r\n  state = { decades: [ 1960, 1970, 1980, 1990, 2000 , 2010 ] }\r\n\r\n  render() {\r\n    const { handleFilterByDecade, oldestDecade, newestDecade } = this.props;\r\n    const { decades } = this.state;\r\n\r\n    return (\r\n      <div className=\"row\">\r\n        <div className=\"col-md-12\">\r\n            <div id=\"filter-decades\" className=\"film-filter\">\r\n              <h2 className=\"filter-header\">Which era are you interested on?</h2>\r\n            <div className=\"decades-filters\">\r\n              <label htmlFor=\"oldest-decade\" className=\"decades-filters__label\">From</label>\r\n              {/* We detect the change on the dropdowns at select level and generate the Dropdown components from decades array. The defaultValue ensures that the current selected value remains checked when switch between tabs. */}\r\n              <select name=\"decades\" id=\"oldest-decade\" defaultValue={oldestDecade} onChange={(e) => handleFilterByDecade(e)}>\r\n                {decades.map((d, index) => {\r\n                  return (\r\n                      <Dropdown key={index}\r\n                          decade={d}\r\n                      />\r\n                      )                            \r\n                  })\r\n                }  \r\n              </select>\r\n              <label htmlFor=\"newest-decade\" className=\"decades-filters__label\">To</label>\r\n              <select name=\"decades\" id=\"newest-decade\" defaultValue={newestDecade} onChange={(e) => handleFilterByDecade(e)}>\r\n                {decades.map((d, index) => {\r\n                    return (\r\n                        <Dropdown key={index}\r\n                            decade={d}\r\n                        />\r\n                        )                            \r\n                    })\r\n                }\r\n              </select>\r\n              </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default FilterByDecade;\r\n","import React, { Component } from 'react'\r\nimport PropTypes from 'prop-types';\r\n\r\nclass Checkbox extends Component {\r\n    static propTypes = {\r\n        genre: PropTypes.string.isRequired,\r\n        genres: PropTypes.array.isRequired\r\n    }   \r\n\r\n    render() {\r\n        const { genre, genres } = this.props;\r\n        let checkedGenre = genres.some(g => genres.includes(genre));\r\n\r\n        return (\r\n            <div className=\"genre-selector\">\r\n                <input id={this.props.genre} defaultChecked={checkedGenre} type=\"checkbox\" className=\"genre-items\" value={this.props.genre} />\r\n                <label htmlFor={this.props.genre}>{this.props.genre}</label>    \r\n            </div>)\r\n    }\r\n}\r\n\r\nexport default Checkbox\r\n","import React, { Component } from 'react';\r\nimport Checkbox from '../layout/Checkbox';\r\nimport PropTypes from 'prop-types';\r\n\r\nclass FilterByGenre extends Component {\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            expanded: false\r\n        }\r\n\r\n        this.genresRef = React.createRef();  \r\n    }\r\n\r\n    static propTypes = {\r\n        handleFilterByGenre: PropTypes.func.isRequired,\r\n        mainGenres: PropTypes.array.isRequired,\r\n        extraGenres: PropTypes.array.isRequired,\r\n        genres: PropTypes.array.isRequired\r\n    }\r\n\r\n    render() {\r\n        const { handleFilterByGenre, mainGenres, extraGenres, genres } = this.props;\r\n        // Toggling the expanded area to show the remaining genres makes it scroll to that are to improve the mobile experience\r\n        const toggleExpanded = (ref) => {\r\n            this.setState({ expanded: !this.state.expanded });\r\n            let elementCoordinates = ref.current.getBoundingClientRect();\r\n            window.scrollTo(0, Math.round(elementCoordinates.y));\r\n        }\r\n\r\n        return (\r\n            <div className=\"row\">\r\n                <div className=\"col-md-12\">\r\n                    <div id=\"filter-genres\" className=\"film-filter\">\r\n                        <h2 className=\"filter-header\">Which genres do you like?</h2>\t\r\n                        <div id=\"main-genres\" onChange={(e) => handleFilterByGenre(e)}>\r\n                            {mainGenres.map((g, index) => {\r\n                            return (\r\n                                <Checkbox \r\n                                    key={index} \r\n                                    genre={g}\r\n                                    genres={genres}\r\n                                    />\r\n                            )                            \r\n                             })}\r\n                        </div>\r\n                        <span className={`cta-expand ${this.state.expanded ? 'expanded' : ''}`}\r\n                            onClick={() => toggleExpanded(this.genresRef)}>\r\n                            See all genres\r\n                        </span>\r\n                        <div id=\"extra-genres\" ref={this.genresRef} onChange={(e) => handleFilterByGenre(e)}>\r\n                            {extraGenres.map((g, index) => {\r\n                                return (\r\n                                    <Checkbox \r\n                                    key={index} \r\n                                    genre={g}\r\n                                    genres={genres}\r\n                                    />\r\n                                )                            \r\n                                })\r\n                            }\r\n                        </div>\r\n                    </div>        \t\t\r\n                </div>    \r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default FilterByGenre","import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nclass FilterByWatched extends Component {\r\n    static propTypes = {\r\n        handleFilterByWatched: PropTypes.func.isRequired,\r\n        hideWatched: PropTypes.bool.isRequired\r\n    }\r\n\r\n    render() {\r\n        const { handleFilterByWatched , hideWatched} = this.props;\r\n        \r\n        return (\r\n            <div className=\"row\">\r\n                <div className=\"col-md-12 centered\">\r\n                    <div id=\"filter-watched\" className=\"film-filter centered\">\r\n                        <button \r\n                            type=\"button\" \r\n                            className=\"btn btn-sm btn-outline-secondary\" \r\n                            onClick={() => handleFilterByWatched()} \r\n                        >\r\n                        {hideWatched ? 'Show' : 'Hide'} watched    \r\n                        </button>\r\n                    </div>  \r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default FilterByWatched;\r\n","import React, { Fragment, Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nclass FilmCard extends Component {\r\n    static propTypes = {\r\n        id: PropTypes.number.isRequired,\r\n        title: PropTypes.string.isRequired,\r\n        year: PropTypes.number.isRequired,\r\n        director: PropTypes.array.isRequired,\r\n        genres: PropTypes.array.isRequired,\r\n        runtime: PropTypes.number.isRequired,\r\n        watched: PropTypes.bool.isRequired,\r\n        whereToWatch: PropTypes.string.isRequired,\r\n        trailer: PropTypes.string.isRequired,\r\n        handleToggleOverlay: PropTypes.func.isRequired,\r\n        convertTime: PropTypes.func.isRequired,\r\n        toggleFilmWatched: PropTypes.func.isRequired,\r\n        handleFilterByYear: PropTypes.func.isRequired,\r\n        handleFilterByDirector: PropTypes.func.isRequired,\r\n        handleFilterByGenre: PropTypes.func.isRequired\r\n    }\r\n\r\n    render() {\r\n        const { id, title, year, director, genres, runtime, watched, whereToWatch, trailer, handleToggleOverlay, convertTime, toggleFilmWatched, handleFilterByYear, handleFilterByDirector, handleFilterByGenre } = this.props;\r\n        let fullTime = convertTime(runtime);\r\n\r\n        return (\r\n            <div className=\"col-md-4\" key={id}>\r\n                <div className={`card film-card mb-4 box-shadow ${watched ? 'watched' : ''}`}>                \r\n                    <button className=\"icon-watched\" title={`${!watched ? 'Mark as watched' : 'Mark as unwatched'}`} onClick={() => toggleFilmWatched(id)}></button>\r\n                    <img className=\"card-img-top\" src={`https://via.placeholder.com/336x255?text=${title}`} alt={title} />\r\n                    <div className=\"card-body\">                            \r\n                        <p itemScope className=\"card-text\">\r\n                            <span className=\"card-text__category\">Title: </span> \r\n                            <span itemProp=\"title\">{title}</span>\r\n                        </p>\r\n                        <p itemScope className=\"card-text\">\r\n                            <span className=\"card-text__category\">Year: </span> \r\n                            <span className=\"card-text__filter\" itemProp=\"year\" onClick={() => handleFilterByYear(year)}>{year}</span>\r\n                        </p>\r\n                        <p itemScope className=\"card-text\">\r\n                            <span className=\"card-text__category\">Director: </span> \r\n                            {director.map((d, index) => {\r\n                            return (\r\n                                <Fragment key={index}>\r\n                                    <span \r\n                                        className=\"card-text__filter\"\r\n                                        itemProp=\"director\" \r\n                                        onClick={() => handleFilterByDirector(d)}\r\n                                        >\r\n                                    {d}\r\n                                    </span>{(index < director.length - 1) && ', '}\r\n                                </Fragment>\r\n                                )\r\n                                })\r\n                            }\r\n                        </p>\r\n                        <p itemScope className=\"card-text\">\r\n                            <span className=\"card-text__category\">Genres: </span>\r\n                            {genres.map((g, index) => {\r\n                            return (\r\n                                <Fragment key={index}>\r\n                                    <span \r\n                                        className=\"card-text__filter\"\r\n                                        itemProp=\"genre\" \r\n                                        onClick={() => handleFilterByGenre(g)}\r\n                                        >\r\n                                    {g}\r\n                                    </span>{(index < genres.length - 1) && ', '}\r\n                                </Fragment>\r\n                                )\r\n                                })\r\n                            }                            \r\n                        </p>\r\n                        <p itemScope className=\"card-text\">\r\n                            <span className=\"card-text__category\">Runtime: </span>\r\n                            <span itemProp=\"runtime\">{fullTime}</span>\r\n                        </p>\r\n                        <div className=\"d-flex justify-content-between align-items-center\">\r\n                            <div className=\"btn-group\">\r\n                                <a href={`https://www.justwatch.com/uk/movie/${whereToWatch}`} className=\"btn btn-sm btn-outline-secondary btn-vod\">Watch Film</a>\r\n                                <button type=\"button\" className=\"btn btn-sm btn-outline-secondary btn-trailer\" onClick={() => handleToggleOverlay(trailer)}>Watch trailer</button>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>    \r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default FilmCard;","import React, { Component } from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\nclass Pagination extends Component {\r\n    static propTypes = {\r\n        allRecords: PropTypes.number.isRequired,\r\n        itemsPerPage: PropTypes.number.isRequired,\r\n        changePage: PropTypes.func.isRequired,\r\n        currentPage: PropTypes.number.isRequired\r\n    }\r\n\r\n    render() {\r\n        const { allRecords, itemsPerPage, changePage, currentPage } = this.props;\r\n        let totalPages = Math.ceil(allRecords / itemsPerPage);\r\n        let pageRange = [];\r\n\r\n        for (let i=0; i < totalPages; i++){\r\n            pageRange.push(i + 1);\r\n        }      \r\n\r\n        return (\r\n            <div className=\"film-pagination\">\r\n                <ul className=\"pagination\">\r\n                    {pageRange.map((film, index) => {\r\n                    return (\r\n                    <li key={index} \r\n                        // When we are at the currentPage we add the class active to highlight it\r\n                        className={`page-item ${currentPage === index + 1 ? \"page-active\" : \"\"}`}\r\n                        onClick={() => changePage(index)}>\r\n                        {film}\r\n                    </li>)\r\n                    })\r\n                    }\r\n                </ul>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Pagination\r\n","import React, { Component } from 'react'\r\n\r\nclass Footer extends Component {\r\n\r\n    render() {\r\n        return (\r\n            <footer>\r\n                <small>\r\n                    Work in progress. New features coming soon.\r\n                </small>\r\n            </footer>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Footer","import React, { Component, Fragment } from 'react';\r\nimport axios from 'axios';\r\nimport FilmOverlay from './components/films/FilmOverlay';\r\nimport Header from './components/layout/Header';\r\nimport Searchbox from './components/layout/Searchbox';\r\nimport FilterByRuntime from './components/filters/FilterByRuntime';\r\nimport FilterByDecade from './components/filters/FilterByDecade';\r\nimport FilterByGenre from './components/filters/FilterByGenre';\r\nimport FilterByWatched from './components/filters/FilterByWatched';\r\nimport Spinner from 'react-bootstrap/Spinner';\r\nimport FilmCard from './components/films/FilmCard';\r\nimport Pagination from './components/layout/Pagination';\r\nimport Footer from './components/layout/Footer';\r\n\r\nimport './styles/styles.css';\r\n\r\nclass App extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = { \r\n        filterTriggered: false,\r\n        runtime: 0,\r\n        selectedYear: 0,\r\n        selectedDirector: '',\r\n        oldestDecade: 0,\r\n        newestDecade: 0,\r\n        hideWatched: false,\r\n        genres: [],\r\n        mainGenres: [\"action\" , \"comedy\" , \"drama\" , \"horror\" , \"sci-fi\"],\r\n        extraGenres: [],\r\n        films: [],\r\n        filteredFilms: [],\r\n        searchText: '',\r\n        selectedId: 0,\r\n        suggestedFilms: [],\r\n        submitted: false,\r\n        submittedQuery: '',\r\n        loading: true,\r\n        overlay: false,\r\n        trailer: \"\",\r\n        goToFilms: false,\r\n        activeFilter: '',\r\n        currentPage: 1,\r\n        totalPages: null,\r\n        contentPerPage: [],\r\n        itemsPerPage: 24\r\n    };\r\n\r\n    this.resultsRef = React.createRef();  \r\n  }\r\n  \r\n  componentDidMount() {\r\n    if (this.state.films.length < 1){\r\n      this.setState({ loading: true }, () => {\r\n        axios.get('https://gist.githubusercontent.com/mklmng/fa894dc9c86dfed34e45063adcf1b73e/raw/eab13d0cb818951da46c78ee18d07f904814015b/Films.json')\r\n        .then(response => {\r\n            let maxRuntime = parseInt(Math.max.apply(0, response.data.map(film => film.runtime)));  \r\n            let filmYears = response.data.map(film => film.year);\r\n            let oldestDecade = Math.floor(Math.min.apply(0, filmYears) / 10) * 10;\r\n            let newestDecade = Math.floor(Math.max.apply(0, filmYears) / 10) * 10;\r\n            let extraGenres = [...this.state.extraGenres];\r\n\r\n            if (!extraGenres.length){\r\n              response.data.forEach(film => {\r\n                film.genres.forEach(genre => {\r\n                  if (!extraGenres.includes(genre) && !this.state.mainGenres.includes(genre)){\r\n                    extraGenres.push(genre);\r\n                  }\r\n                });\r\n              })\r\n              extraGenres.sort();\r\n            }          \r\n\r\n            this.setState({ \r\n              loading: false,\r\n              runtime: maxRuntime,\r\n              oldestDecade: oldestDecade,\r\n              newestDecade: newestDecade,\r\n              extraGenres: extraGenres,\r\n              films: response.data,\r\n              filteredFilms: response.data\r\n            });\r\n\r\n            const { genres, hideWatched, selectedDirector, selectedYear, selectedId, submitted, submittedQuery } = this.state;\r\n\r\n            // we create the filters properties and assign them the values we get from the state properties. \r\n\r\n            this.filters = {\r\n              runtime: maxRuntime,\r\n              oldestDecade,\r\n              newestDecade,\r\n              genres,\r\n              hideWatched,\r\n              director: selectedDirector,\r\n              year: selectedYear,\r\n              id: selectedId,\r\n              submitted,\r\n              submittedQuery\r\n            }\r\n        })\r\n        .catch(error => {\r\n            this.setState({ loading: false })\r\n        });\r\n      });\r\n    } else {\r\n      this.setState({ films: this.state.films })\r\n    }\r\n  }   \r\n\r\n  toggleWatched = () => { this.setState({ watched: !this.state.watched })};\r\n  showFilter = filterName => this.setState({ activeFilter: filterName });\r\n\r\n  // We define the different functions we'll need to chain every time the user interact with any of the filters.\r\n\r\n  runtimeFilter = (filmRuntime) => (film) => {\r\n    return filmRuntime === 0 || film.runtime <= filmRuntime;\r\n  }\r\n\r\n  genreFilter = (genre) => (film) => {\r\n    return !genre.length || film.genres.some(g => genre.includes(g))\r\n  }\r\n\r\n  watchedFilter = (hideWatched) => (film) => {\r\n    return !hideWatched || film.watched !== hideWatched\r\n  }\r\n\r\n  yearFilter = (oldestDecade, newestDecade, year) => (film) => {\r\n    if (year === 0){\r\n      return film.year >= oldestDecade && film.year <= newestDecade + 9;\r\n    } else {\r\n      return film.year === year;\r\n    }\r\n  }\r\n\r\n  directorFilter = (director) => (film) => {\r\n    return !director.length || film.director.some(d => director.includes(d));\r\n  }\r\n\r\n  submittedFilter = (submitted, submittedQuery) => (film) => {\r\n    return !submitted || film.title.toLowerCase().includes(submittedQuery);\r\n  }\r\n\r\n  suggestedFilter = (id) => (film) => {\r\n    return id === 0 || film.id === id\r\n  }\r\n\r\n  // At this stage we have all we need to filter our films array using the functions and properties we defined earlier\r\n  // To make things easier we create a chainfilters function that will pass only two parameters.\r\n  \r\n  chainFilters = (films,filters) => films\r\n    .filter(this.runtimeFilter(filters.runtime))\r\n    .filter(this.genreFilter(filters.genres))\r\n    .filter(this.yearFilter(filters.oldestDecade, filters.newestDecade, filters.year))\r\n    .filter(this.directorFilter(filters.director))\r\n    .filter(this.submittedFilter(filters.submitted, filters.submittedQuery))\r\n    .filter(this.suggestedFilter(filters.id))\r\n    .filter(this.watchedFilter(filters.hideWatched));\r\n\r\n  // Some filters like handleFilterByYear, handleFilterByDirector, showFilm or handleSubmit need to reset the values of certain properties (oldestDecade, newestDecade, runtime, genres, etc) to default\r\n  // since if the users selects the year I'm assuming that they want to see all films from that year ignoring possible filters they used earlier like runtime, genres, etc.\r\n\r\n  handleFilterByYear = (y) => {\r\n    let currentPage = this.state.currentPage;\r\n\r\n    this.filters.year = parseInt(y);\r\n\r\n    this.filters.id = 0;\r\n    this.filters.director = '';\r\n    this.filters.submitted = false;\r\n    this.filters.submittedQuery = '';  \r\n    this.filters.runtime = parseInt(Math.max.apply(0, this.state.films.map(film => film.runtime))); \r\n    this.filters.genres = [];\r\n\r\n    let filteredFilms = this.chainFilters(this.state.films, this.filters);\r\n\r\n    // If the number of records change after filtering and is greater that the number of items per page it resets the currentPage to 1 so it you'll always at the beginning of your filtered items.\r\n\r\n    if (filteredFilms.length > this.state.itemsPerPage){\r\n      currentPage = 1;\r\n    }\r\n \r\n    this.setState({\r\n      filteredFilms: filteredFilms,\r\n      searchText: '',\r\n      selectedId: 0,\r\n      selectedYear: parseInt(y),\r\n      selectedDirector: '', \r\n      filterTriggered: true,\r\n      submitted: false,\r\n      currentPage\r\n    })\r\n  };\r\n\r\n  handleFilterByDirector = (d) => {\r\n    let currentPage = this.state.currentPage;\r\n\r\n    // After assigning the director to the filters director property we need to reset the reset of properties to default values to ensure we see all films by this director\r\n    this.filters.id = 0;\r\n    this.filters.year = 0;\r\n    this.filters.submitted = false;\r\n    this.filters.submittedQuery = '';  \r\n    this.filters.runtime = parseInt(Math.max.apply(0, this.state.films.map(film => film.runtime))); \r\n\r\n    let filmYears = this.state.films.map(film => film.year); // Get the years of the film database\r\n    this.filters.oldestDecade = Math.floor(Math.min.apply(0, filmYears) / 10) * 10;\r\n    this.filters.newestDecade = Math.floor(Math.max.apply(0, filmYears) / 10) * 10;\r\n    this.filters.genres = [];\r\n\r\n    let filteredFilms = this.chainFilters(this.state.films, this.filters);\r\n    if (filteredFilms.length > this.state.itemsPerPage){\r\n      currentPage = 1;\r\n    }\r\n\r\n    this.setState({\r\n      filteredFilms: filteredFilms,\r\n      searchText: '',\r\n      selectedId: 0,\r\n      selectedDirector: d, \r\n      selectedYear: 0, \r\n      filterTriggered: true,\r\n      submitted: false,\r\n      currentPage\r\n    })\r\n  };\r\n\r\n  handleFilterByWatched = () => {\r\n    let currentPage = this.state.currentPage;\r\n\r\n    this.filters.hideWatched = !this.state.hideWatched;\r\n\r\n    let filteredFilms = this.chainFilters(this.state.films, this.filters);\r\n    if (filteredFilms.length > this.state.itemsPerPage){\r\n      currentPage = 1;\r\n    }\r\n\r\n    this.setState({ \r\n      filteredFilms: filteredFilms,\r\n      hideWatched: !this.state.hideWatched, \r\n      filterWatched: true,\r\n      currentPage\r\n    })\r\n  };\r\n\r\n  handleFilterByRuntime = (e) => {\r\n    let currentPage = this.state.currentPage;\r\n\r\n    this.filters.id = 0;\r\n    this.filters.year = 0;\r\n    this.filters.submitted = false;\r\n    this.filters.submittedQuery = this.state.searchText;  \r\n    this.filters.director = '';\r\n\r\n    this.filters.runtime = parseInt(e.target.value);\r\n    let filteredFilms = this.chainFilters(this.state.films, this.filters);\r\n    if (filteredFilms.length > this.state.itemsPerPage){\r\n      currentPage = 1;\r\n    }\r\n\r\n    this.setState(\r\n      { \r\n        filteredFilms: filteredFilms,\r\n        searchText: '',\r\n        selectedId: 0,\r\n        selectedDirector: '',\r\n        selectedYear: 0,\r\n        runtime: parseInt(e.target.value), \r\n        filterTriggered: true,\r\n        submitted: false,\r\n        currentPage\r\n      }\r\n    ); \r\n  } \r\n\r\n  handleFilterByDecade = (e) => {\r\n    let currentPage = this.state.currentPage;\r\n\r\n    const decade = parseInt(e.target.value);\r\n    const selectedIndex = e.target.selectedIndex;\r\n\r\n    this.filters.id = 0;\r\n    this.filters.year = 0;\r\n    this.filters.submitted = false;\r\n    this.filters.submittedQuery = this.state.searchText;  \r\n    this.filters.director = '';\r\n\r\n    if (e.target.id === \"oldest-decade\"){\r\n      this.filters.oldestDecade = decade;\r\n      this.filters.newestDecade = this.state.newestDecade;\r\n      if (decade > this.state.newestDecade){  \r\n        this.filters.newestDecade = decade;\r\n        document.querySelector(\"#newest-decade\").selectedIndex = selectedIndex;\r\n      }\r\n    } else{\r\n      this.filters.newestDecade = decade;\r\n      this.filters.oldestDecade = this.state.oldestDecade;\r\n\r\n      if (decade < this.state.oldestDecade){\r\n        this.filters.oldestDecade = decade;\r\n        document.querySelector(\"#newest-decade\").selectedIndex = document.querySelector(\"#oldest-decade\").selectedIndex;\r\n      }\r\n    }\r\n\r\n    let filteredFilms = this.chainFilters(this.state.films, this.filters);\r\n    if (filteredFilms.length > this.state.itemsPerPage){\r\n      currentPage = 1;\r\n    }\r\n\r\n    this.setState({ \r\n      filteredFilms: filteredFilms,\r\n      searchText: '',\r\n      selectedId: 0,\r\n      selectedDirector: '',\r\n      selectedYear: 0,\r\n      oldestDecade: this.filters.oldestDecade,\r\n      newestDecade: this.filters.newestDecade,\r\n      filterTriggered: true,\r\n      submitted: false,\r\n      currentPage\r\n    });\r\n  }   \r\n\r\n  // This function was thought to allow the users seeeing the results when they click on the number of matches.\r\n  // Although not necessary for iPad or desktop it should make the UX better in some mobile screens.\r\n\r\n  scrollToSection = (ref) => {\r\n    this.setState({ goToFilms: !this.state.goToFilms });\r\n\r\n    if (this.state.goToFilms){\r\n        window.scrollTo(0,0)\r\n      } else {\r\n        let elementCoordinates = document.querySelector(\".row.product-list\").getBoundingClientRect();\r\n        window.scrollTo(0, Math.round(elementCoordinates.y));\r\n    }\r\n  }\r\n\r\n  handleFilterByGenre = (e) => {\r\n    let currentPage = this.state.currentPage;\r\n    let genre = \"\";\r\n    // this checks if we are removing genres from the filter tags or adding/removing them from the genre filter\r\n    typeof e === \"string\" ? genre = e : genre = e.target.value;\r\n\r\n    this.filters.id = 0;\r\n    this.filters.year = 0;\r\n    this.filters.submitted = false;\r\n    this.filters.submittedQuery = this.state.searchText;  \r\n    this.filters.director = '';\r\n\r\n    if (!this.state.genres.includes(genre)){\r\n      this.filters.genres = [...this.state.genres, genre];    \r\n      let filteredFilms = this.chainFilters(this.state.films, this.filters);\r\n\r\n      if (filteredFilms.length > this.state.itemsPerPage){\r\n        currentPage = 1;\r\n      }\r\n\r\n      this.setState({\r\n        filteredFilms: filteredFilms,\r\n        searchText: '',\r\n        selectedId: 0,\r\n        selectedDirector: '',\r\n        selectedYear: 0,\r\n        genres: [...this.state.genres, genre],\r\n        filterTriggered: true,\r\n        submitted: false,\r\n        currentPage\r\n      })\r\n    } else {\r\n        let genres = [...this.state.genres];\r\n        let index = genres.indexOf(genre);\r\n        genres.splice(index, 1);\r\n        this.filters.genres = genres;  \r\n\r\n        let filteredFilms = this.chainFilters(this.state.films, this.filters);\r\n        if (filteredFilms.length > this.state.itemsPerPage){\r\n          currentPage = 1;\r\n        }\r\n\r\n        this.setState({ \r\n          filteredFilms: filteredFilms,\r\n          searchText: '',\r\n          selectedId: 0,\r\n          selectedDirector: '',\r\n          selectedYear: 0,\r\n          genres: genres,\r\n          filterTriggered: true,\r\n          submitted: false,\r\n          currentPage\r\n        })\r\n    }\r\n  }\r\n\r\n  // Shows the overlay with the emndedded trailer when the users click on the \"Watch the trailer\" cta.\r\n  handleToggleOverlay = (trailer) => {\r\n      this.setState({ \r\n        overlay: !this.state.overlay, \r\n        trailer: trailer \r\n      })\r\n  }\r\n\r\n  // Converts the runtime from minutes to hours and minutes to make it more readable for the users.\r\n  convertTime = (time) => {\r\n    let hours = time / 60;\r\n    if (time < 60){\r\n        return `${time}mins`;\r\n    } \r\n    let fullTime = ((time % 60) > 0) ? `${Math.floor(hours)}h ${(time % 60)}mins` : `${hours}h`;\r\n    return fullTime;\r\n  }\r\n\r\n  // Allows the user to mark/unmark films as watched interacting with eye icon and \"The End\" text on the film cards.\r\n  toggleFilmWatched = (id) => {\r\n    let updatedFilms = [...this.state.films];\r\n    updatedFilms.forEach(f => {\r\n      if (f.id === id){\r\n        f.watched = !f.watched;\r\n      }\r\n    });\r\n    this.setState({ films: updatedFilms, selectedDirector: '' })\r\n  }\r\n\r\n  // This function empties the values of directors and years when the users click on the respective label tags.\r\n  resetProperty = (e) => {\r\n    if (e === \"director\"){\r\n      this.setState({ \r\n        selectedDirector: ''\r\n      })\r\n    }\r\n    if (e === \"year\"){\r\n      this.setState({ \r\n        selectedYear: 0\r\n      })\r\n    }\r\n  }\r\n\r\n  handleChange = (e) => {\r\n    !e.target.value.length \r\n    ? \r\n    this.setState({\r\n      searchText: e.target.value,\r\n      filterTriggered: true,\r\n      suggestedFilms: [],\r\n      submittedQuery: ''\r\n    })\r\n    :\r\n    this.setState({ \r\n      searchText: e.target.value,\r\n      filterTriggered: true,\r\n      submittedQuery: ''\r\n     }) \r\n  };\r\n\r\n  handleAutocomplete = (e) => {\r\n    if (this.state.searchText.length > 0){\r\n      let suggestions = [];\r\n      let searchItem = e.target.value.toLowerCase();\r\n      this.state.films.forEach(f => {\r\n        let title = f.title.toLowerCase();\r\n        if (title.startsWith(searchItem)){\r\n            suggestions.push(f);\r\n          }\r\n        }\r\n      )\r\n      this.setState({ suggestedFilms: suggestions, submitted: false, filterTriggered: true })\r\n    }\r\n  }\r\n\r\n  // If the users click on one the autosuggested films the film card will show it as the only match.\r\n  showFilm = (id) => {\r\n    this.filters.id = id;\r\n    this.filters.year = 0;\r\n    this.filters.hideWatched = false;\r\n    this.filters.submitted = false;\r\n    this.filters.submittedQuery = '';  \r\n    this.filters.director = '';\r\n    this.filters.runtime = parseInt(Math.max.apply(0, this.state.films.map(film => film.runtime))); \r\n\r\n    let filmYears = this.state.films.map(film => film.year); // Get the years of the film database\r\n    this.filters.oldestDecade = Math.floor(Math.min.apply(0, filmYears) / 10) * 10;\r\n    this.filters.newestDecade = Math.floor(Math.max.apply(0, filmYears) / 10) * 10;\r\n    this.filters.genres = [];\r\n\r\n    let filteredFilms = this.chainFilters(this.state.films, this.filters);\r\n\r\n    this.setState({\r\n      filteredFilms: filteredFilms,\r\n      searchText: '',\r\n      selectedId: id,\r\n      suggestedFilms: [],\r\n      filterTriggered: true,\r\n      submitted: false,\r\n      hideWatched: false,\r\n      genres: []\r\n    })\r\n  }\r\n\r\n  handleSubmit = (event) => {  \r\n    event.preventDefault();\r\n   \r\n    let currentPage = this.state.currentPage;\r\n\r\n    // After assigning the director to the filters director property we need to reset the reset of properties to default values to ensure we see all films by this director\r\n    this.filters.id = 0;\r\n    this.filters.year = 0;\r\n    this.filters.hideWatched = false;\r\n    this.filters.submitted = true;\r\n    this.filters.submittedQuery = this.state.searchText;  \r\n    this.filters.director = '';\r\n    this.filters.runtime = parseInt(Math.max.apply(0, this.state.films.map(film => film.runtime))); \r\n\r\n    let filmYears = this.state.films.map(film => film.year); // Get the years of the film database\r\n    this.filters.oldestDecade = Math.floor(Math.min.apply(0, filmYears) / 10) * 10;\r\n    this.filters.newestDecade = Math.floor(Math.max.apply(0, filmYears) / 10) * 10;\r\n    this.filters.genres = [];\r\n\r\n    let filteredFilms = this.chainFilters(this.state.films, this.filters);\r\n    if (filteredFilms.length > this.state.itemsPerPage){\r\n      currentPage = 1\r\n    }\r\n\r\n    this.setState({\r\n      filteredFilms: filteredFilms,\r\n      submittedQuery: this.state.searchText,\r\n      suggestedFilms: [],\r\n      submitted: true,\r\n      selectedId: 0,\r\n      searchText: '',\r\n      hideWatched: false,\r\n      currentPage\r\n    })\r\n  }\r\n\r\n  changePage = (index) => {\r\n    this.setState({\r\n      currentPage: parseInt(index + 1)\r\n    })\r\n  }\r\n    \r\n  render(){\r\n    const { itemsPerPage, currentPage, filteredFilms, filterTriggered, suggestedFilms, searchText, submitted, submittedQuery, runtime, selectedYear, selectedDirector, oldestDecade, newestDecade, hideWatched, genres, trailer, overlay, activeFilter, mainGenres, extraGenres } = this.state;\r\n    let filmsperPage = filteredFilms;\r\n\r\n    if (filteredFilms.length > 24){\r\n      filmsperPage = filteredFilms.slice(((currentPage) - 1) * 24,(currentPage * 24));\r\n    } \r\n\r\n    let fullTime = this.convertTime(runtime);\r\n\r\n    return (\r\n      <div id=\"full-wrapper\">\r\n        <link rel=\"stylesheet\" href=\"https://maxcdn.bootstrapcdn.com/bootstrap/4.5.0/css/bootstrap.min.css\" integrity=\"sha384-9aIt2nRpC12Uk9gS9baDl411NQApFmC26EwAOH8WgZl5MYYxFfc+NcPb1dKGj7Sk\" crossOrigin=\"anonymous\" />\r\n\r\n        {overlay &&  <FilmOverlay handleToggleOverlay={this.handleToggleOverlay} trailer={trailer} /> }\r\n\r\n        <div className=\"container\">\r\n          <div className=\"row below1\">\r\n            <Header />\r\n            <Searchbox\r\n              searchText={searchText}\r\n              suggestedFilms={suggestedFilms}\r\n              handleChange={this.handleChange}\r\n              handleAutocomplete={this.handleAutocomplete}\r\n              handleSubmit={this.handleSubmit}\r\n              showFilm={this.showFilm}\r\n            />\r\n          </div>\r\n          <div className=\"row\">\r\n            <div className=\"col-md-12\">\r\n              <div className=\"main-filters\">\r\n                <h2 className=\"sub-header\">Filter by</h2>\r\n              </div>\r\n            </div>\r\n          </div>\r\n          <div className=\"row\">\r\n            <div className=\"col-12 col-md-4\">\r\n            <button \r\n                className={`btn btn-sm btn-lg-3 btn-outline-secondary btn-filter ${activeFilter === 'runtime' ? 'active' : ''}`}\r\n                onClick={() => this.showFilter('runtime')}\r\n            >Runtime</button><button\r\n              className={`btn btn-sm btn-lg-3 btn-outline-secondary btn-filter ${activeFilter === 'genre' ? 'active' : ''}`}\r\n              onClick={() => this.showFilter('genre')}\r\n            >Genre</button><button\r\n              className={`btn btn-sm btn-lg-3 btn-outline-secondary btn-filter ${activeFilter === 'decade' ? 'active' : ''}`}\r\n            onClick={() => this.showFilter('decade')}\r\n          >Decade</button>\r\n            </div>\r\n          </div>\r\n          <Fragment>\r\n            {activeFilter === 'runtime' &&\r\n                <FilterByRuntime \r\n                  handleFilterByRuntime={this.handleFilterByRuntime}\r\n                  runtime={runtime}\r\n                  />\r\n            }\r\n            {activeFilter === 'genre' && \r\n                <FilterByGenre \r\n                  handleFilterByGenre={this.handleFilterByGenre} \r\n                  mainGenres={mainGenres}\r\n                  extraGenres={extraGenres}\r\n                  genres={genres}\r\n              />\r\n            }\r\n            {activeFilter === 'decade' &&  \r\n            <FilterByDecade \r\n              handleFilterByDecade={this.handleFilterByDecade}\r\n              oldestDecade={oldestDecade}\r\n              newestDecade={newestDecade}\r\n                />  }\r\n            <FilterByWatched \r\n              handleFilterByWatched={this.handleFilterByWatched}\r\n              hideWatched={hideWatched}  \r\n            />\r\n          </Fragment>\r\n          <div className=\"row\">\r\n              <div className=\"col-md-12\">\r\n                {filterTriggered &&\r\n                  <div id=\"search-labels\">\r\n                    <p className=\"search-labels__content\">\r\n                      <span className=\"search-labels__content__intro\">Looking for:</span>\r\n                      {(submittedQuery.length > 0 || submitted) && \r\n                        <span className=\"search-labels__tag\">{submittedQuery}</span>\r\n                      }\r\n\r\n                      {(searchText.length > 0) && \r\n                        <span className=\"search-labels__tag\">{searchText}</span>\r\n                      }\r\n\r\n                      {!(searchText.length > 0 || submitted) && \r\n                      <Fragment>\r\n                        {genres.map((g,index) => {\r\n                          return (\r\n                            <span key={index} className=\"search-labels__tag search-labels__tag--interactive\" onClick={() => this.handleFilterByGenre(g)}>{g}</span>\r\n                          )\r\n                        })\r\n                        }\r\n\r\n                        {((runtime !== 0) && (runtime < 181)) && \r\n                        <span className=\"search-labels__tag\">{fullTime} or less</span>\r\n                        }\r\n\r\n                        {((selectedYear === 0) && oldestDecade === newestDecade) && \r\n                          <span className=\"search-labels__tag\">{oldestDecade}s</span>\r\n                        }\r\n                        {((selectedYear === 0) && !(oldestDecade === newestDecade)) && \r\n                        <span className=\"search-labels__tag\">{oldestDecade}s - {newestDecade}s</span>\r\n                        }\r\n\r\n                        {selectedYear > 0 && <span className=\"search-labels__tag search-labels__tag--interactive\" onClick={() => this.resetProperty(\"year\")}>{selectedYear}</span> }\r\n                        {selectedDirector !== \"\" && <span className=\"search-labels__tag search-labels__tag--interactive\" onClick={() => this.resetProperty(\"director\")}>Directed by {selectedDirector}</span> }\r\n                        {hideWatched && <span className=\"search-labels__tag search-labels__tag--interactive\" onClick={() => this.handleFilterByWatched()}>unseen</span>}\r\n                      </Fragment>\r\n                      }\r\n                    </p>\r\n                  </div>\r\n                }\r\n                  <div id=\"results\" ref={this.resultsRef}  onClick={() => this.scrollToSection(this.resultsRef)}>\r\n                    <p className={`film-results ${this.state.goToFilms ? \"return\" : \"\"}`}>\r\n                      {filteredFilms.length > 1 && \r\n                        <span>\r\n                            There are <strong>{filteredFilms.length}</strong> matches.\r\n                        </span>\r\n                        }\r\n                        {filteredFilms.length === 1 &&\r\n                        <span>\r\n                            There is <strong>1</strong> match.\r\n                        </span>\r\n                        }\r\n                        {!filteredFilms.length && \r\n                        <span>Sorry, there aren't any matches.</span>\r\n                        }\r\n                    </p>\r\n                  </div>\r\n              </div>\r\n          </div>\r\n          <div className=\"row product-list\">\r\n              {this.state.loading && \r\n                <Spinner animation=\"border\" role=\"status\">\r\n                  <span className=\"sr-only\">Loading...</span>\r\n                </Spinner>\r\n              }\r\n              {!this.state.loading &&\r\n                filmsperPage.map((film) => {\r\n                  return (\r\n                    <FilmCard \r\n                        key={film.id}\r\n                        id={film.id}\r\n                        title={film.title}\r\n                        year={film.year}\r\n                        director={film.director}\r\n                        genres={film.genres}\r\n                        runtime={film.runtime}\r\n                        watched={film.watched}\r\n                        whereToWatch={film.whereToWatch}\r\n                        trailer={film.trailer}\r\n                        overlay={this.state.overlay}\r\n                        handleToggleOverlay={this.handleToggleOverlay}\r\n                        convertTime={this.convertTime}\r\n                        toggleFilmWatched={this.toggleFilmWatched}\r\n                        handleFilterByYear={this.handleFilterByYear}\r\n                        handleFilterByDirector={this.handleFilterByDirector}\r\n                        handleFilterByGenre={this.handleFilterByGenre}\r\n                    />\r\n                  )                            \r\n                })\r\n              }\r\n          </div>\r\n\r\n          {filteredFilms.length}\r\n\r\n          {filteredFilms.length > itemsPerPage && \r\n            <Pagination \r\n              allRecords={filteredFilms.length} \r\n              itemsPerPage={itemsPerPage} \r\n              changePage={this.changePage}\r\n              currentPage={currentPage}\r\n            />\r\n          }\r\n\r\n        </div>\r\n        <Footer />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}