{"version":3,"sources":["components/films/FilmOverlay.js","components/layout/Header.js","components/layout/RadioButton.js","components/filters/FilterByRuntime.js","components/layout/Dropdown.js","components/filters/FilterByDecade.js","components/layout/Checkbox.js","components/filters/FilterByGenre.js","components/filters/FilterByWatched.js","components/films/FilmCard.js","components/layout/Footer.js","App.js","serviceWorker.js","index.js"],"names":["FilmOverlay","this","props","handleToggleOverlay","trailer","id","onClick","className","title","itemProp","width","height","src","frameBorder","allow","allowFullScreen","Component","Header","RadioButton","runtime","runtimeText","runtimeId","checkedRuntime","selectedRuntime","toString","type","name","value","defaultChecked","htmlFor","FilterByRuntime","state","runtimes","handleFilterByRuntime","onChange","e","map","r","index","key","Dropdown","decade","FilterByDecade","decades","handleFilterByDecade","oldestDecade","newestDecade","defaultValue","d","Checkbox","genre","genres","checkedGenre","some","g","includes","FilterByGenre","expanded","genresRef","React","createRef","handleFilterByGenre","mainGenres","extraGenres","ref","setState","elementCoordinates","current","getBoundingClientRect","window","scrollTo","Math","round","y","toggleExpanded","FilterByWatched","handleFilterByWatched","hideWatched","FilmCard","year","director","watched","whereToWatch","convertTime","toggleFilmWatched","handleFilterByYear","handleFilterByDirector","fullTime","alt","itemScope","length","href","Footer","App","toggleWatched","showFilter","filterName","activeFilter","selectedYear","parseInt","filterTriggered","selectedDirector","prevstate","target","selectedIndex","document","querySelector","scrollToSection","goToFilms","indexOf","splice","overlay","time","hours","floor","updatedFilms","films","forEach","f","resetProperty","loading","resultsRef","axios","get","then","response","maxRuntime","max","apply","data","film","filmYears","min","push","sort","catch","error","filteredFilms","filter","rel","integrity","crossOrigin","Spinner","animation","role","Boolean","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","registration","unregister","console","message"],"mappings":"uTAkCeA,EA/Bf,uKAMc,IAAD,EACoCC,KAAKC,MAAtCC,EADH,EACGA,oBAAqBC,EADxB,EACwBA,QAE7B,OACI,yBAAKC,GAAG,UAAUC,QAAS,kBAAMH,MAC/B,yBAAKI,UAAU,oBACb,yBAAKA,UAAU,qCACX,4BACIC,MAAOJ,EACPK,SAAS,UACTF,UAAU,2CACVG,MAAM,MACNC,OAAO,MACPC,IAAG,iDAA4CR,GAC/CS,YAAY,IACZC,MAAM,0EACNC,iBAAe,WAtBvC,GAAiCC,aCSlBC,E,uKARP,OACI,4BAAQZ,GAAG,eACP,wBAAIE,UAAU,eAAd,sB,GAJKS,aC+BNE,EA9Bf,uKAQc,IAAD,EACwDjB,KAAKC,MAA1DiB,EADH,EACGA,QAASC,EADZ,EACYA,YAAaC,EADzB,EACyBA,UAC1BC,GAAiB,EAKrB,OAJIH,IAHC,EACoCI,gBAETC,aAC5BF,GAAiB,GAIjB,yBAAKf,UAAU,kBACX,2BACIkB,KAAK,QACLlB,UAAU,aACVmB,KAAK,UACLrB,GAAIgB,EACJM,MAAOR,EACPS,eAAgBN,IAEpB,2BAAOO,QAASR,GAAYD,QAzB5C,GAAiCJ,aCkElBc,E,4MA3DXC,MAAQ,CACJC,SAAU,CACN,CACIb,QAAS,KACTE,UAAW,aACXD,YAAa,YAEjB,CACID,QAAS,MACTE,UAAW,cACXD,YAAa,MAEjB,CACID,QAAS,MACTE,UAAW,cACXD,YAAa,YAEjB,CACID,QAAS,MACTE,UAAW,cACXD,YAAa,MAEjB,CACID,QAAS,OACTE,UAAW,cACXD,YAAa,2B,uDAKf,IAAD,EACsCnB,KAAKC,MAAxCiB,EADH,EACGA,QAASc,EADZ,EACYA,sBAEjB,OACI,yBAAK1B,UAAU,OACX,yBAAKA,UAAU,aACX,yBAAKF,GAAG,iBAAiBE,UAAU,eAC/B,yBAAKF,GAAG,YACJ,wBAAIE,UAAU,iBAAd,8BACI,yBAAKF,GAAG,mBAAmB6B,SAAU,SAACC,GAAD,OAAOF,EAAsBE,KAC7DlC,KAAK8B,MAAMC,SAASI,KAAI,SAACC,EAAGC,GACzB,OACI,kBAAC,EAAD,CAAaC,IAAKD,EACdnB,QAASkB,EAAElB,QACXE,UAAWgB,EAAEhB,UACbD,YAAaiB,EAAEjB,YACfG,gBAAiBJ,gB,GApDnCH,aCWfwB,E,uKANP,OACI,4BAAQb,MAAO1B,KAAKC,MAAMuC,QAASxC,KAAKC,MAAMuC,Y,GAPnCzB,aCmDR0B,E,4MA3CbX,MAAQ,CAAEY,QAAS,CAAE,KAAM,KAAM,KAAM,KAAM,IAAO,O,uDAE1C,IAAD,EACsD1C,KAAKC,MAA1D0C,EADD,EACCA,qBAAsBC,EADvB,EACuBA,aAAcC,EADrC,EACqCA,aACpCH,EAAY1C,KAAK8B,MAAjBY,QAER,OACE,yBAAKpC,UAAU,OACb,yBAAKA,UAAU,aACX,yBAAKF,GAAG,iBAAiBE,UAAU,eACjC,wBAAIA,UAAU,iBAAd,oCACF,yBAAKA,UAAU,mBACb,2BAAOsB,QAAQ,gBAAgBtB,UAAU,0BAAzC,QACA,4BAAQmB,KAAK,UAAUrB,GAAG,gBAAgB0C,aAAcF,EAAcX,SAAU,SAACC,GAAD,OAAOS,EAAqBT,KACzGQ,EAAQP,KAAI,SAACY,EAAGV,GACf,OACI,kBAAC,EAAD,CAAUC,IAAKD,EACXG,OAAQO,QAOpB,2BAAOnB,QAAQ,gBAAgBtB,UAAU,0BAAzC,MACA,4BAAQmB,KAAK,UAAUrB,GAAG,gBAAgB0C,aAAcD,EAAcZ,SAAU,SAACC,GAAD,OAAOS,EAAqBT,KACzGQ,EAAQP,KAAI,SAACY,EAAGV,GACb,OACI,kBAAC,EAAD,CAAUC,IAAKD,EACXG,OAAQO,gB,GApCPhC,aCiBdiC,E,uKAZD,IAAD,EACqBhD,KAAKC,MAAvBgD,EADH,EACGA,MAAOC,EADV,EACUA,OACXC,EAAeD,EAAOE,MAAK,SAAAC,GAAC,OAAIH,EAAOI,SAASL,MAEpD,OACI,yBAAK3C,UAAU,kBACX,2BAAOF,GAAIJ,KAAKC,MAAMgD,MAAOtB,eAAgBwB,EAAc3B,KAAK,WAAWlB,UAAU,cAAcoB,MAAO1B,KAAKC,MAAMgD,QACrH,2BAAOrB,QAAS5B,KAAKC,MAAMgD,OAAQjD,KAAKC,MAAMgD,Y,GAbvClC,aCkERwC,E,kDAhEX,WAAYtD,GAAO,IAAD,8BACd,cAAMA,IACD6B,MAAQ,CACT0B,UAAU,GAGd,EAAKC,UAAYC,IAAMC,YANT,E,qDAgBR,IAAD,SAC4D3D,KAAKC,MAA9D2D,EADH,EACGA,oBAAqBC,EADxB,EACwBA,WAAYC,EADpC,EACoCA,YAAaZ,EADjD,EACiDA,OAQtD,OACI,yBAAK5C,UAAU,OACX,yBAAKA,UAAU,aACX,yBAAKF,GAAG,gBAAgBE,UAAU,eAC9B,wBAAIA,UAAU,iBAAd,6BACA,yBAAKF,GAAG,cAAc6B,SAAU,SAACC,GAAD,OAAO0B,EAAoB1B,KACtD2B,EAAW1B,KAAI,SAACkB,EAAGhB,GACpB,OACI,kBAAC,EAAD,CACIC,IAAKD,EACLY,MAAOI,EACPH,OAAQA,QAKpB,0BAAM5C,UAAS,qBAAgBN,KAAK8B,MAAM0B,SAAW,WAAa,IAC9DnD,QAAS,kBAvBN,SAAC0D,GACpB,EAAKC,SAAS,CAAER,UAAW,EAAK1B,MAAM0B,WACtC,IAAIS,EAAqBF,EAAIG,QAAQC,wBACrCC,OAAOC,SAAS,EAAGC,KAAKC,MAAMN,EAAmBO,IAoBlBC,CAAe,EAAKhB,aADvC,kBAIA,yBAAKrD,GAAG,eAAe2D,IAAK/D,KAAKyD,UAAWxB,SAAU,SAACC,GAAD,OAAO0B,EAAoB1B,KAC5E4B,EAAY3B,KAAI,SAACkB,EAAGhB,GACjB,OACI,kBAAC,EAAD,CACAC,IAAKD,EACLY,MAAOI,EACPH,OAAQA,e,GApDhBnC,aC0Bb2D,E,uKArBD,IAAD,EAC0C1E,KAAKC,MAA5C0E,EADH,EACGA,sBAAwBC,EAD3B,EAC2BA,YAEhC,OACI,yBAAKtE,UAAU,OACX,yBAAKA,UAAU,sBACX,yBAAKF,GAAG,iBAAiBE,UAAU,wBAC/B,4BACIkB,KAAK,SACLlB,UAAU,mCACVD,QAAS,kBAAMsE,MAElBC,EAAc,OAAS,OALxB,mB,GAbM7D,a,QCwFf8D,E,uKArED,IAAD,EACwM7E,KAAKC,MAA1MG,EADH,EACGA,GAAIG,EADP,EACOA,MAAOuE,EADd,EACcA,KAAMC,EADpB,EACoBA,SAAU7B,EAD9B,EAC8BA,OAAQhC,EADtC,EACsCA,QAAS8D,EAD/C,EAC+CA,QAASC,EADxD,EACwDA,aAAc9E,EADtE,EACsEA,QAASD,EAD/E,EAC+EA,oBAAqBgF,EADpG,EACoGA,YAAaC,EADjH,EACiHA,kBAAmBC,EADpI,EACoIA,mBAAoBC,EADxJ,EACwJA,uBAAwBzB,EADhL,EACgLA,oBACjL0B,EAAWJ,EAAYhE,GAE3B,OACI,yBAAKZ,UAAU,WAAWgC,IAAKlC,GAC3B,yBAAKE,UAAS,yCAAoC0E,EAAU,UAAY,KACpE,4BAAQ1E,UAAU,eAAeD,QAAS,kBAAM8E,EAAkB/E,MAClE,yBAAKE,UAAU,eAAeK,IAAG,mDAA8CJ,GAASgF,IAAKhF,IAC7F,yBAAKD,UAAU,aACX,uBAAGkF,WAAS,EAAClF,UAAU,aACnB,0BAAMA,UAAU,uBAAhB,WACA,0BAAME,SAAS,SAASD,IAE5B,uBAAGiF,WAAS,EAAClF,UAAU,aACnB,0BAAMA,UAAU,uBAAhB,UACA,0BAAMA,UAAU,oBAAoBE,SAAS,OAAOH,QAAS,kBAAM+E,EAAmBN,KAAQA,IAElG,uBAAGU,WAAS,EAAClF,UAAU,aACnB,0BAAMA,UAAU,uBAAhB,cACCyE,EAAS5C,KAAI,SAACY,EAAGV,GAClB,OACI,kBAAC,WAAD,CAAUC,IAAKD,GACX,0BACI/B,UAAU,oBACVE,SAAS,WACTH,QAAS,kBAAMgF,EAAuBtC,KAEzCA,GACQV,EAAQ0C,EAASU,OAAS,GAAM,UAMrD,uBAAGD,WAAS,EAAClF,UAAU,aACnB,0BAAMA,UAAU,uBAAhB,YACC4C,EAAOf,KAAI,SAACkB,EAAGhB,GAChB,OACI,kBAAC,WAAD,CAAUC,IAAKD,GACX,0BACI/B,UAAU,oBACVE,SAAS,QACTH,QAAS,kBAAMuD,EAAoBP,KAEtCA,GACQhB,EAAQa,EAAOuC,OAAS,GAAM,UAMnD,uBAAGD,WAAS,EAAClF,UAAU,aACnB,0BAAMA,UAAU,uBAAhB,aACA,0BAAME,SAAS,WAAW8E,IAE9B,yBAAKhF,UAAU,qDACX,yBAAKA,UAAU,aACX,uBAAGoF,KAAI,6CAAwCT,GAAgB3E,UAAU,4CAAzE,cACA,4BAAQkB,KAAK,SAASlB,UAAU,+CAA+CD,QAAS,kBAAMH,EAAoBC,KAAlH,0B,GA9ETY,aCYR4E,E,uKAVP,OACI,gCACI,mF,GALK5E,aCiXN6E,G,wDApWb,WAAY3F,GAAQ,IAAD,8BACjB,cAAMA,IA+DR4F,cAAgB,WAAQ,EAAK7B,SAAS,CAAEgB,SAAU,EAAKlD,MAAMkD,WAhE1C,EAiEnBc,WAAa,SAAAC,GAAU,OAAI,EAAK/B,SAAS,CAAEgC,aAAcD,KAjEtC,EAkEnBX,mBAAqB,SAAAZ,GAAC,OAAI,EAAKR,SAAS,CAACiC,aAAcC,SAAS1B,GAAI2B,iBAAiB,KAlElE,EAmEnBd,uBAAyB,SAAAtC,GAAC,OAAI,EAAKiB,SAAS,CAACoC,iBAAkBrD,EAAGkD,aAAc,EAAGE,iBAAiB,KAnEjF,EAoEnBxB,sBAAwB,kBAAM,EAAKX,UAAS,SAAAqC,GAAS,MAAK,CAAEzB,aAAcyB,EAAUzB,YAAauB,iBAAiB,OApE/F,EAqEnBnE,sBAAwB,SAAAE,GAAC,OAAI,EAAK8B,SAAS,CAAE9C,QAASgF,SAAShE,EAAEoE,OAAO5E,OAAQyE,iBAAiB,KArE9E,EAsEnBxD,qBAAuB,SAACT,GACtB,IAAMM,EAAS0D,SAAShE,EAAEoE,OAAO5E,OAC3B6E,EAAgBrE,EAAEoE,OAAOC,cAEX,kBAAhBrE,EAAEoE,OAAOlG,KACPoC,EAAS,EAAKV,MAAMe,cACtB,EAAKmB,SAAS,CACZpB,aAAcJ,EACdK,aAAcL,EACd2D,iBAAiB,EACjBF,aAAc,IAEhBO,SAASC,cAAc,kBAAkBF,cAAgBA,GAEzD,EAAKvC,SAAS,CACZpB,aAAcJ,EACd2D,iBAAiB,EACjBF,aAAc,KAKA,kBAAhB/D,EAAEoE,OAAOlG,KACP8B,EAAEoE,OAAO5E,OAAS,EAAKI,MAAMc,aAC/B,EAAKoB,SAAS,CACZnB,aAAcL,EACd2D,iBAAiB,EACjBF,aAAc,KAGhB,EAAKjC,SAAS,CACZnB,aAAc,EAAKf,MAAMc,aACzBuD,iBAAiB,EACjBF,aAAc,IAEhBO,SAASC,cAAc,kBAAkBF,cAAgBC,SAASC,cAAc,kBAAkBF,iBAzGrF,EA8GnBG,gBAAkB,SAAC3C,GAGjB,GAFA,EAAKC,SAAS,CAAE2C,WAAY,EAAK7E,MAAM6E,YAEnC,EAAK7E,MAAM6E,UACXvC,OAAOC,SAAS,EAAE,OACb,CACL,IAAIJ,EAAqBF,EAAIG,QAAQC,wBACrCC,OAAOC,SAAS,EAAGC,KAAKC,MAAMN,EAAmBO,MArHpC,EAyHnBZ,oBAAsB,SAAC1B,GACrB,IAAIe,EAAQ,GAGZ,GAFwBA,EAAX,kBAANf,EAAyBA,EAAYA,EAAEoE,OAAO5E,MAEhD,EAAKI,MAAMoB,OAAOI,SAASL,GAMzB,CACH,IAAIC,EAAM,YAAO,EAAKpB,MAAMoB,QACxBb,EAAQa,EAAO0D,QAAQ3D,GAC3BC,EAAO2D,OAAOxE,EAAO,GACrB,EAAK2B,SAAS,CACZd,OAAQA,EACRiD,iBAAiB,EACjBC,iBAAkB,UAZtB,EAAKpC,SAAS,CACZd,OAAO,GAAD,mBAAM,EAAKpB,MAAMoB,QAAjB,CAAyBD,IAC/BkD,iBAAiB,EACjBC,iBAAkB,MAjIL,EA+InBlG,oBAAsB,SAACC,GACnB,EAAK6D,SAAS,CACZ8C,SAAU,EAAKhF,MAAMgF,QACrB3G,QAASA,KAlJI,EAsJnB+E,YAAc,SAAC6B,GACb,IAAIC,EAAQD,EAAO,GACnB,OAAIA,EAAO,GACD,GAAN,OAAUA,EAAV,QAEaA,EAAO,GAAM,EAAf,UAAuBzC,KAAK2C,MAAMD,GAAlC,aAA8CD,EAAO,GAArD,kBAAoEC,EAApE,MA3JE,EA+JnB7B,kBAAoB,SAAC/E,GACnB,IAAI8G,EAAY,YAAO,EAAKpF,MAAMqF,OAClCD,EAAaE,SAAQ,SAAAC,GACfA,EAAEjH,KAAOA,IACXiH,EAAErC,SAAWqC,EAAErC,YAGnB,EAAKhB,SAAS,CAAEmD,MAAOD,EAAcd,iBAAkB,MAtKtC,EAyKnBkB,cAAgB,SAACpF,GACL,aAANA,GACF,EAAK8B,SAAS,CAAEoC,iBAAkB,KAE1B,SAANlE,GACF,EAAK8B,SAAS,CAAEiC,aAAc,KA5KhC,EAAKnE,MAAQ,CACTqE,iBAAiB,EACjBjF,QAAS,EACT+E,aAAc,EACdG,iBAAkB,GAClBxD,aAAc,EACdC,aAAc,EACd+B,aAAa,EACb1B,OAAQ,GACRW,WAAY,CAAC,SAAW,SAAW,QAAU,SAAW,UACxDC,YAAa,GACbqD,MAAO,GACPI,SAAS,EACTT,SAAS,EACT3G,QAAS,GACTwG,WAAW,EACXX,aAAc,IAGlB,EAAKwB,WAAa9D,IAAMC,YArBP,E,gEAwBE,IAAD,OACd3D,KAAK8B,MAAMqF,MAAM1B,OAAS,EAC5BzF,KAAKgE,SAAS,CAAEuD,SAAS,IAAQ,WAC/BE,IAAMC,IAAI,sIACTC,MAAK,SAAAC,GACF,IAAIC,EAAa3B,SAAS5B,KAAKwD,IAAIC,MAAM,EAAGH,EAASI,KAAK7F,KAAI,SAAA8F,GAAI,OAAIA,EAAK/G,aACvEgH,EAAYN,EAASI,KAAK7F,KAAI,SAAA8F,GAAI,OAAIA,EAAKnD,QAC3ClC,EAA+D,GAAhD0B,KAAK2C,MAAM3C,KAAK6D,IAAIJ,MAAM,EAAGG,GAAa,IACzDrF,EAA+D,GAAhDyB,KAAK2C,MAAM3C,KAAKwD,IAAIC,MAAM,EAAGG,GAAa,IACzDpE,EAAW,YAAO,EAAKhC,MAAMgC,aAE5BA,EAAY2B,SACfmC,EAASI,KAAKZ,SAAQ,SAAAa,GACpBA,EAAK/E,OAAOkE,SAAQ,SAAAnE,GACba,EAAYR,SAASL,IAAW,EAAKnB,MAAM+B,WAAWP,SAASL,IAClEa,EAAYsE,KAAKnF,SAIvBa,EAAYuE,QAGd,EAAKrE,SAAS,CACZuD,SAAS,EACTrG,QAAS2G,EACTjF,aAAcA,EACdC,aAAcA,EACdiB,YAAaA,EACbqD,MAAOS,EAASI,UAGrBM,OAAM,SAAAC,GACH,EAAKvE,SAAS,CAAEuD,SAAS,UAI/BvH,KAAKgE,SAAS,CAAEmD,MAAOnH,KAAK8B,MAAMqF,U,+BAsH7B,IAAD,SACgLnH,KAAK8B,MAAnLqE,EADF,EACEA,gBAAiBgB,EADnB,EACmBA,MAAOjG,EAD1B,EAC0BA,QAAS+E,EADnC,EACmCA,aAAcG,EADjD,EACiDA,iBAAkBxD,EADnE,EACmEA,aAAcC,EADjF,EACiFA,aAAc+B,EAD/F,EAC+FA,YAAa1B,EAD5G,EAC4GA,OAAQ/C,EADpH,EACoHA,QAAS2G,EAD7H,EAC6HA,QAASd,EADtI,EACsIA,aAAcnC,EADpJ,EACoJA,WAAYC,EADhK,EACgKA,YAElK0E,EAAgBrB,EAAMsB,QAAO,SAAAR,GAAI,OACnCA,EAAK/G,SAAWA,GACZ+G,EAAKnD,MAAQlC,GAAgBqF,EAAKnD,MAAQjC,EAAe,KAG3DK,EAAOuC,SACT+C,EAAgBA,EAAcC,QAAO,SAAAR,GAAI,OACrCA,EAAK/E,OAAOE,MAAK,SAAAC,GAAC,OAAIH,EAAOI,SAASD,UAI5C,IAAIiC,EAAWtF,KAAKkF,YAAYhE,GAiBhC,OAZqB,IAAjB+E,IACFuC,EAAgBxI,KAAK8B,MAAMqF,MAAMsB,QAAO,SAAApB,GAAC,OAAIA,EAAEvC,OAASmB,MAGtDG,EAAiBX,SACnB+C,EAAgBxI,KAAK8B,MAAMqF,MAAMsB,QAAO,SAAApB,GAAC,OAAIA,EAAEtC,SAAS3B,MAAK,SAAAC,GAAC,OAAI+C,EAAiB9C,SAASD,UAG1FuB,IACF4D,EAAgBA,EAAcC,QAAO,SAAApB,GAAC,OAAKA,EAAErC,YAI7C,yBAAK5E,GAAG,gBACN,0BACIsI,IAAI,aACJhD,KAAK,wEACLiD,UAAU,0EACVC,YAAY,cAGf9B,GAAY,kBAAC,EAAD,CAAa5G,oBAAqBF,KAAKE,oBAAqBC,QAASA,IAElF,kBAAC,EAAD,MACA,yBAAKG,UAAU,aACb,yBAAKA,UAAU,OACb,yBAAKA,UAAU,aACb,yBAAKA,UAAU,gBACb,wBAAIA,UAAU,cAAd,gBAIN,yBAAKA,UAAU,OACb,yBAAKA,UAAU,gBACf,4BACIA,UAAS,+DAA2E,YAAjB0F,EAA6B,SAAW,IAC3G3F,QAAS,kBAAM,EAAKyF,WAAW,aAFnC,WAGiB,4BACfxF,UAAS,+DAA2E,UAAjB0F,EAA2B,SAAW,IACzG3F,QAAS,kBAAM,EAAKyF,WAAW,WAFhB,SAGF,4BACbxF,UAAS,+DAA2E,WAAjB0F,EAA4B,SAAW,IAC5G3F,QAAS,kBAAM,EAAKyF,WAAW,YAFhB,YAMjB,kBAAC,WAAD,KACoB,YAAjBE,GACG,kBAAC,EAAD,CACEhE,sBAAuBhC,KAAKgC,sBAC5Bd,QAASA,IAGG,UAAjB8E,GACG,kBAAC,EAAD,CACEpC,oBAAqB5D,KAAK4D,oBAC1BC,WAAYA,EACZC,YAAaA,EACbZ,OAAQA,IAGI,WAAjB8C,GACD,kBAAC,EAAD,CACErD,qBAAsB3C,KAAK2C,qBAC3BC,aAAcA,EACdC,aAAcA,IAEhB,kBAAC,EAAD,CACE8B,sBAAuB3E,KAAK2E,sBAC5BC,YAAaA,KAGjB,yBAAKtE,UAAU,OACX,yBAAKA,UAAU,aACZ6F,GACC,yBAAK/F,GAAG,iBACN,uBAAGE,UAAU,0BACX,0BAAMA,UAAU,iCAAhB,gBACC4C,EAAOuC,OAAS,GACjBvC,EAAOf,KAAI,SAACkB,EAAEhB,GACZ,OACE,0BAAMC,IAAKD,EAAO/B,UAAU,qDAAqDD,QAAS,kBAAM,EAAKuD,oBAAoBP,KAAKA,MAKnH,IAAZnC,GAAmBA,EAAU,KAChC,0BAAMZ,UAAU,sBAAsBgF,EAAtC,YAGoB,IAAjBW,GAAuBrD,IAAiBC,GACzC,0BAAMvC,UAAU,sBAAsBsC,EAAtC,KAEkB,IAAjBqD,KAAyBrD,IAAiBC,IAC7C,0BAAMvC,UAAU,sBAAsBsC,EAAtC,OAAwDC,EAAxD,KAGCoD,EAAe,GAAK,0BAAM3F,UAAU,qDAAqDD,QAAS,kBAAM,EAAKiH,cAAc,UAAUrB,GAChH,KAArBG,GAA2B,0BAAM9F,UAAU,qDAAqDD,QAAS,kBAAM,EAAKiH,cAAc,cAAvG,eAAiIlB,GAC5JxB,GAAe,0BAAMtE,UAAU,qDAAqDD,QAAS,kBAAM,EAAKsE,0BAAzF,YAIpB,yBAAKvE,GAAG,UAAU2D,IAAK/D,KAAKwH,WAAanH,QAAS,kBAAM,EAAKqG,gBAAgB,EAAKc,cAChF,uBAAGlH,UAAS,uBAAkBN,KAAK8B,MAAM6E,UAAY,SAAW,KAC7D6B,EAAc/C,OAAS,GACtB,2CACc,gCAAS+C,EAAc/C,QADrC,aAI0B,IAAzB+C,EAAc/C,QACf,0CACa,qCADb,YAIE+C,EAAc/C,QAChB,sEAMd,yBAAKnF,UAAU,oBACVN,KAAK8B,MAAMyF,SACV,kBAACsB,EAAA,EAAD,CAASC,UAAU,SAASC,KAAK,UAC/B,0BAAMzI,UAAU,WAAhB,eAGHkI,EAAcrG,KAAI,SAAC8F,GAClB,OACE,kBAAC,EAAD,CACI3F,IAAK2F,EAAK7H,GACVA,GAAI6H,EAAK7H,GACTG,MAAO0H,EAAK1H,MACZuE,KAAMmD,EAAKnD,KACXC,SAAUkD,EAAKlD,SACf7B,OAAQ+E,EAAK/E,OACbhC,QAAS+G,EAAK/G,QACd8D,QAASiD,EAAKjD,QACdC,aAAcgD,EAAKhD,aACnB9E,QAAS8H,EAAK9H,QACd2G,QAAS,EAAKhF,MAAMgF,QACpB5G,oBAAqB,EAAKA,oBAC1BgF,YAAa,EAAKA,YAClBC,kBAAmB,EAAKA,kBACxBC,mBAAoB,EAAKA,mBACzBC,uBAAwB,EAAKA,uBAC7BzB,oBAAqB,EAAKA,2BAMxC,kBAAC,EAAD,W,GA/VU7C,cCFEiI,QACW,cAA7B5E,OAAO6E,SAASC,UAEe,UAA7B9E,OAAO6E,SAASC,UAEhB9E,OAAO6E,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEF9C,SAAS+C,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB/B,MAAK,SAAAgC,GACJA,EAAaC,gBAEdtB,OAAM,SAAAC,GACLsB,QAAQtB,MAAMA,EAAMuB,c","file":"static/js/main.acaa600f.chunk.js","sourcesContent":["import React, { Component } from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\nexport class FilmOverlay extends Component {\r\n    static propTypes = {\r\n        handleToggleOverlay: PropTypes.func.isRequired,\r\n        trailer: PropTypes.string.isRequired\r\n    }\r\n\r\n    render() {\r\n        const { handleToggleOverlay, trailer } = this.props;\r\n\r\n        return (\r\n            <div id=\"overlay\" onClick={() => handleToggleOverlay()}>\r\n              <div className=\"overlay__wrapper\">\r\n                <div className=\"overlay__wrapper__video-container\">\r\n                    <iframe \r\n                        title={trailer}\r\n                        itemProp=\"trailer\"\r\n                        className=\"overlay__wrapper__video-container__video\" \r\n                        width=\"560\" \r\n                        height=\"315\" \r\n                        src={`https://www.youtube-nocookie.com/embed/${trailer}`} \r\n                        frameBorder=\"0\" \r\n                        allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" \r\n                        allowFullScreen>\r\n                    </iframe>\r\n                </div>\r\n              </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default FilmOverlay\r\n","import React, { Component } from 'react';\r\n\r\nclass Header extends Component {\r\n    render() {\r\n        return (\r\n            <header id=\"main-header\">\r\n                <h1 className=\"header-main\">What to Watch</h1>\r\n            </header>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Header;","import React, { Component } from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\nexport class RadioButton extends Component {\r\n    static propTypes = {\r\n        runtime: PropTypes.string.isRequired,\r\n        runtimeText: PropTypes.string.isRequired,\r\n        runtimeId: PropTypes.string.isRequired,\r\n        selectedRuntime: PropTypes.number.isRequired\r\n    }\r\n\r\n    render() {\r\n        const { runtime, runtimeText, runtimeId, selectedRuntime } = this.props;\r\n        let checkedRuntime = false;\r\n        if (runtime === selectedRuntime.toString()){\r\n            checkedRuntime = true;\r\n        }\r\n\r\n        return (\r\n            <div className=\"runtime-filter\">\r\n                <input \r\n                    type=\"radio\" \r\n                    className=\"film-times\" \r\n                    name=\"runtime\" \r\n                    id={runtimeId}\r\n                    value={runtime}\r\n                    defaultChecked={checkedRuntime}\r\n                        />\r\n                <label htmlFor={runtimeId}>{runtimeText}</label>\r\n            </div>)\r\n    }\r\n}\r\n\r\nexport default RadioButton\r\n","import React, { Component } from 'react'\r\nimport RadioButton from '../layout/RadioButton'\r\nimport PropTypes from 'prop-types'\r\n\r\nclass FilterByRuntime extends Component {\r\n    static propTypes = {\r\n        handleFilterByRuntime: PropTypes.func.isRequired,\r\n        runtime: PropTypes.number.isRequired\r\n    }\r\n\r\n    state = {\r\n        runtimes: [\r\n            {\r\n                runtime: \"90\",\r\n                runtimeId: \"runtime-90\",\r\n                runtimeText: \"1h 30min\"\r\n            },\r\n            {\r\n                runtime: \"120\",\r\n                runtimeId: \"runtime-120\",\r\n                runtimeText: \"2h\"\r\n            },\r\n            {\r\n                runtime: \"150\",\r\n                runtimeId: \"runtime-150\",\r\n                runtimeText: \"2h 30min\"\r\n            },\r\n            {\r\n                runtime: \"180\",\r\n                runtimeId: \"runtime-180\",\r\n                runtimeText: \"3h\"\r\n            },\r\n            {\r\n                runtime: \"9999\",\r\n                runtimeId: \"runtime-all\",\r\n                runtimeText: \"All the time in world\"\r\n            }\r\n        ]\r\n    }\r\n\r\n    render() {\r\n        const { runtime, handleFilterByRuntime } = this.props;\r\n        \r\n        return (\r\n            <div className=\"row\">\r\n                <div className=\"col-md-12\">\r\n                    <div id=\"filter-runtime\" className=\"film-filter\">\r\n                        <div id=\"runtimes\">\r\n                            <h2 className=\"filter-header\">How much time do you have?</h2>\t\r\n                                <div id=\"runtimes-filters\" onChange={(e) => handleFilterByRuntime(e)}>\r\n                                    {this.state.runtimes.map((r, index) => {\r\n                                        return (\r\n                                            <RadioButton key={index}\r\n                                                runtime={r.runtime}\r\n                                                runtimeId={r.runtimeId}\r\n                                                runtimeText={r.runtimeText}\r\n                                                selectedRuntime={runtime}\r\n                                            />\r\n                                            )                            \r\n                                    })}  \r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default FilterByRuntime\r\n","import React, { Component } from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\nclass Dropdown extends Component {\r\n    static propTypes = {\r\n        decade: PropTypes.number.isRequired\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <option value={this.props.decade}>{this.props.decade}</option>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Dropdown\r\n","import React, { Component } from \"react\";\r\nimport Dropdown from '../layout/Dropdown';\r\nimport PropTypes from \"prop-types\";\r\n\r\nclass FilterByDecade extends Component {\r\n  static propTypes = {\r\n    handleFilterByDecade: PropTypes.func.isRequired,\r\n    oldestDecade: PropTypes.number.isRequired,\r\n    newestDecade: PropTypes.number.isRequired\r\n  };\r\n\r\n  state = { decades: [ 1960, 1970, 1980, 1990, 2000 , 2010 ] }\r\n\r\n  render() {\r\n    const { handleFilterByDecade, oldestDecade, newestDecade } = this.props;\r\n    const { decades } = this.state;\r\n\r\n    return (\r\n      <div className=\"row\">\r\n        <div className=\"col-md-12\">\r\n            <div id=\"filter-decades\" className=\"film-filter\">\r\n              <h2 className=\"filter-header\">Which era are you interested on?</h2>\r\n            <div className=\"decades-filters\">\r\n              <label htmlFor=\"oldest-decade\" className=\"decades-filters__label\">From</label>\r\n              <select name=\"decades\" id=\"oldest-decade\" defaultValue={oldestDecade} onChange={(e) => handleFilterByDecade(e)}>\r\n                {decades.map((d, index) => {\r\n                  return (\r\n                      <Dropdown key={index}\r\n                          decade={d}\r\n\r\n                      />\r\n                      )                            \r\n                  })\r\n                }  \r\n              </select>\r\n              <label htmlFor=\"newest-decade\" className=\"decades-filters__label\">To</label>\r\n              <select name=\"decades\" id=\"newest-decade\" defaultValue={newestDecade} onChange={(e) => handleFilterByDecade(e)}>\r\n                {decades.map((d, index) => {\r\n                    return (\r\n                        <Dropdown key={index}\r\n                            decade={d}\r\n                        />\r\n                        )                            \r\n                    })\r\n                }\r\n              </select>\r\n              </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default FilterByDecade;\r\n","import React, { Component } from 'react'\r\nimport PropTypes from 'prop-types';\r\n\r\nclass Checkbox extends Component {\r\n    static propTypes = {\r\n        genre: PropTypes.string.isRequired,\r\n        genres: PropTypes.array.isRequired\r\n    }   \r\n\r\n    render() {\r\n        const { genre, genres } = this.props;\r\n        let checkedGenre = genres.some(g => genres.includes(genre));\r\n\r\n        return (\r\n            <div className=\"genre-selector\">\r\n                <input id={this.props.genre} defaultChecked={checkedGenre} type=\"checkbox\" className=\"genre-items\" value={this.props.genre} />\r\n                <label htmlFor={this.props.genre}>{this.props.genre}</label>    \r\n            </div>)\r\n    }\r\n}\r\n\r\nexport default Checkbox\r\n","import React, { Component } from 'react';\r\nimport Checkbox from '../layout/Checkbox';\r\nimport PropTypes from 'prop-types';\r\n\r\nclass FilterByGenre extends Component {\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            expanded: false\r\n        }\r\n\r\n        this.genresRef = React.createRef();  \r\n    }\r\n\r\n    static propTypes = {\r\n        handleFilterByGenre: PropTypes.func.isRequired,\r\n        mainGenres: PropTypes.array.isRequired,\r\n        extraGenres: PropTypes.array.isRequired,\r\n        genres: PropTypes.array.isRequired\r\n    }\r\n\r\n    render() {\r\n        const { handleFilterByGenre, mainGenres, extraGenres, genres } = this.props;\r\n        \r\n        const toggleExpanded = (ref) => {\r\n            this.setState({ expanded: !this.state.expanded });\r\n            let elementCoordinates = ref.current.getBoundingClientRect();\r\n            window.scrollTo(0, Math.round(elementCoordinates.y));\r\n        }\r\n\r\n        return (\r\n            <div className=\"row\">\r\n                <div className=\"col-md-12\">\r\n                    <div id=\"filter-genres\" className=\"film-filter\">\r\n                        <h2 className=\"filter-header\">Which genres do you like?</h2>\t\r\n                        <div id=\"main-genres\" onChange={(e) => handleFilterByGenre(e)}>\r\n                            {mainGenres.map((g, index) => {\r\n                            return (\r\n                                <Checkbox \r\n                                    key={index} \r\n                                    genre={g}\r\n                                    genres={genres}\r\n                                    />\r\n                            )                            \r\n                             })}\r\n                        </div>\r\n                        <span className={`cta-expand ${this.state.expanded ? 'expanded' : ''}`}\r\n                            onClick={() => toggleExpanded(this.genresRef)}>\r\n                            See all genres\r\n                        </span>\r\n                        <div id=\"extra-genres\" ref={this.genresRef} onChange={(e) => handleFilterByGenre(e)}>\r\n                            {extraGenres.map((g, index) => {\r\n                                return (\r\n                                    <Checkbox \r\n                                    key={index} \r\n                                    genre={g}\r\n                                    genres={genres}\r\n                                    />\r\n                                )                            \r\n                                })\r\n                            }\r\n                        </div>\r\n                    </div>        \t\t\r\n                </div>    \r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default FilterByGenre","import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nclass FilterByWatched extends Component {\r\n    static propTypes = {\r\n        handleFilterByWatched: PropTypes.func.isRequired,\r\n        hideWatched: PropTypes.bool.isRequired\r\n    }\r\n\r\n    render() {\r\n        const { handleFilterByWatched , hideWatched} = this.props;\r\n        \r\n        return (\r\n            <div className=\"row\">\r\n                <div className=\"col-md-12 centered\">\r\n                    <div id=\"filter-watched\" className=\"film-filter centered\">\r\n                        <button \r\n                            type=\"button\" \r\n                            className=\"btn btn-sm btn-outline-secondary\" \r\n                            onClick={() => handleFilterByWatched()} \r\n                        >\r\n                        {hideWatched ? 'Show' : 'Hide'} watched    \r\n                        </button>\r\n                    </div>  \r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default FilterByWatched;\r\n","import React, { Fragment, Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nclass FilmCard extends Component {\r\n    static propTypes = {\r\n        id: PropTypes.number.isRequired,\r\n        title: PropTypes.string.isRequired,\r\n        year: PropTypes.number.isRequired,\r\n        director: PropTypes.array.isRequired,\r\n        genres: PropTypes.array.isRequired,\r\n        runtime: PropTypes.number.isRequired,\r\n        watched: PropTypes.bool.isRequired,\r\n        whereToWatch: PropTypes.string.isRequired,\r\n        trailer: PropTypes.string.isRequired,\r\n        handleToggleOverlay: PropTypes.func.isRequired,\r\n        convertTime: PropTypes.func.isRequired,\r\n        toggleFilmWatched: PropTypes.func.isRequired,\r\n        handleFilterByYear: PropTypes.func.isRequired,\r\n        handleFilterByDirector: PropTypes.func.isRequired,\r\n        handleFilterByGenre: PropTypes.func.isRequired\r\n    }\r\n\r\n    render() {\r\n        const { id, title, year, director, genres, runtime, watched, whereToWatch, trailer, handleToggleOverlay, convertTime, toggleFilmWatched, handleFilterByYear, handleFilterByDirector, handleFilterByGenre } = this.props;\r\n        let fullTime = convertTime(runtime);\r\n\r\n        return (\r\n            <div className=\"col-md-4\" key={id}>\r\n                <div className={`card film-card mb-4 box-shadow ${watched ? 'watched' : ''}`}>                \r\n                    <button className=\"icon-watched\" onClick={() => toggleFilmWatched(id)}></button>\r\n                    <img className=\"card-img-top\" src={`https://via.placeholder.com/336x255?text=${title}`} alt={title} />\r\n                    <div className=\"card-body\">                            \r\n                        <p itemScope className=\"card-text\">\r\n                            <span className=\"card-text__category\">Title: </span> \r\n                            <span itemProp=\"title\">{title}</span>\r\n                        </p>\r\n                        <p itemScope className=\"card-text\">\r\n                            <span className=\"card-text__category\">Year: </span> \r\n                            <span className=\"card-text__filter\" itemProp=\"year\" onClick={() => handleFilterByYear(year)}>{year}</span>\r\n                        </p>\r\n                        <p itemScope className=\"card-text\">\r\n                            <span className=\"card-text__category\">Director: </span> \r\n                            {director.map((d, index) => {\r\n                            return (\r\n                                <Fragment key={index}>\r\n                                    <span \r\n                                        className=\"card-text__filter\"\r\n                                        itemProp=\"director\" \r\n                                        onClick={() => handleFilterByDirector(d)}\r\n                                        >\r\n                                    {d}\r\n                                    </span>{(index < director.length - 1) && ', '}\r\n                                </Fragment>\r\n                                )\r\n                                })\r\n                            }\r\n                        </p>\r\n                        <p itemScope className=\"card-text\">\r\n                            <span className=\"card-text__category\">Genres: </span>\r\n                            {genres.map((g, index) => {\r\n                            return (\r\n                                <Fragment key={index}>\r\n                                    <span \r\n                                        className=\"card-text__filter\"\r\n                                        itemProp=\"genre\" \r\n                                        onClick={() => handleFilterByGenre(g)}\r\n                                        >\r\n                                    {g}\r\n                                    </span>{(index < genres.length - 1) && ', '}\r\n                                </Fragment>\r\n                                )\r\n                                })\r\n                            }                            \r\n                        </p>\r\n                        <p itemScope className=\"card-text\">\r\n                            <span className=\"card-text__category\">Runtime: </span>\r\n                            <span itemProp=\"runtime\">{fullTime}</span>\r\n                        </p>\r\n                        <div className=\"d-flex justify-content-between align-items-center\">\r\n                            <div className=\"btn-group\">\r\n                                <a href={`https://www.justwatch.com/uk/movie/${whereToWatch}`} className=\"btn btn-sm btn-outline-secondary btn-vod\">Watch Film</a>\r\n                                <button type=\"button\" className=\"btn btn-sm btn-outline-secondary btn-trailer\" onClick={() => handleToggleOverlay(trailer)}>Watch trailer</button>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>    \r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default FilmCard;","import React, { Component } from 'react'\r\n\r\nclass Footer extends Component {\r\n\r\n    render() {\r\n        return (\r\n            <footer>\r\n                <small>\r\n                    Work in progress. New features coming soon.\r\n                </small>\r\n            </footer>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Footer","import React, { Component, Fragment } from 'react';\r\nimport axios from 'axios';\r\nimport FilmOverlay from './components/films/FilmOverlay';\r\nimport Header from './components/layout/Header';\r\nimport FilterByRuntime from './components/filters/FilterByRuntime';\r\nimport FilterByDecade from './components/filters/FilterByDecade';\r\nimport FilterByGenre from './components/filters/FilterByGenre';\r\nimport FilterByWatched from './components/filters/FilterByWatched';\r\nimport Spinner from 'react-bootstrap/Spinner';\r\nimport FilmCard from './components/films/FilmCard';\r\nimport Footer from './components/layout/Footer';\r\n\r\nimport './styles/styles.css';\r\n\r\nclass App extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = { \r\n        filterTriggered: false,\r\n        runtime: 0,\r\n        selectedYear: 0,\r\n        selectedDirector: '',\r\n        oldestDecade: 0,\r\n        newestDecade: 0,\r\n        hideWatched: false,\r\n        genres: [],\r\n        mainGenres: [\"action\" , \"comedy\" , \"drama\" , \"horror\" , \"sci-fi\"],\r\n        extraGenres: [],\r\n        films: [],\r\n        loading: true,\r\n        overlay: false,\r\n        trailer: \"\",\r\n        goToFilms: false,\r\n        activeFilter: ''\r\n    };\r\n\r\n    this.resultsRef = React.createRef();  \r\n  }\r\n  \r\n  componentDidMount() {\r\n    if (this.state.films.length < 1){\r\n      this.setState({ loading: true }, () => {\r\n        axios.get('https://gist.githubusercontent.com/mklmng/fa894dc9c86dfed34e45063adcf1b73e/raw/eab13d0cb818951da46c78ee18d07f904814015b/Films.json')\r\n        .then(response => {\r\n            let maxRuntime = parseInt(Math.max.apply(0, response.data.map(film => film.runtime)));  \r\n            let filmYears = response.data.map(film => film.year);\r\n            let oldestDecade = Math.floor(Math.min.apply(0, filmYears) / 10) * 10;\r\n            let newestDecade = Math.floor(Math.max.apply(0, filmYears) / 10) * 10;\r\n            let extraGenres = [...this.state.extraGenres];\r\n\r\n            if (!extraGenres.length){\r\n              response.data.forEach(film => {\r\n                film.genres.forEach(genre => {\r\n                  if (!extraGenres.includes(genre) && !this.state.mainGenres.includes(genre)){\r\n                    extraGenres.push(genre);\r\n                  }\r\n                });\r\n              })\r\n              extraGenres.sort();\r\n            }          \r\n\r\n            this.setState({ \r\n              loading: false,\r\n              runtime: maxRuntime,\r\n              oldestDecade: oldestDecade,\r\n              newestDecade: newestDecade,\r\n              extraGenres: extraGenres,\r\n              films: response.data\r\n            })\r\n        })\r\n        .catch(error => {\r\n            this.setState({ loading: false })\r\n        });\r\n      });\r\n    } else {\r\n      this.setState({ films: this.state.films })\r\n    }\r\n  }   \r\n\r\n  toggleWatched = () => { this.setState({ watched: !this.state.watched })};\r\n  showFilter = filterName => this.setState({ activeFilter: filterName });\r\n  handleFilterByYear = y => this.setState({selectedYear: parseInt(y), filterTriggered: true });\r\n  handleFilterByDirector = d => this.setState({selectedDirector: d, selectedYear: 0, filterTriggered: true });\r\n  handleFilterByWatched = () => this.setState(prevstate => ({ hideWatched: !prevstate.hideWatched, filterTriggered: true}));\r\n  handleFilterByRuntime = e => this.setState({ runtime: parseInt(e.target.value), filterTriggered: true }); \r\n  handleFilterByDecade = (e) => {\r\n    const decade = parseInt(e.target.value);\r\n    const selectedIndex = e.target.selectedIndex;\r\n\r\n    if (e.target.id === \"oldest-decade\"){\r\n      if (decade > this.state.newestDecade){\r\n        this.setState({ \r\n          oldestDecade: decade,\r\n          newestDecade: decade,\r\n          filterTriggered: true,\r\n          selectedYear: 0,\r\n        })\r\n        document.querySelector(\"#newest-decade\").selectedIndex = selectedIndex;\r\n      } else {\r\n        this.setState({\r\n          oldestDecade: decade,\r\n          filterTriggered: true,\r\n          selectedYear: 0,\r\n        })\r\n      }\r\n    }\r\n\r\n    if (e.target.id === \"newest-decade\"){\r\n      if (e.target.value >= this.state.oldestDecade){\r\n        this.setState({ \r\n          newestDecade: decade,\r\n          filterTriggered: true,\r\n          selectedYear: 0,\r\n        })\r\n      } else {\r\n        this.setState({\r\n          newestDecade: this.state.oldestDecade,\r\n          filterTriggered: true,\r\n          selectedYear: 0,\r\n        })\r\n        document.querySelector(\"#newest-decade\").selectedIndex = document.querySelector(\"#oldest-decade\").selectedIndex;\r\n      }\r\n    }\r\n  }   \r\n\r\n  scrollToSection = (ref) => {\r\n    this.setState({ goToFilms: !this.state.goToFilms });\r\n\r\n    if (this.state.goToFilms){\r\n        window.scrollTo(0,0)\r\n      } else {\r\n        let elementCoordinates = ref.current.getBoundingClientRect();\r\n        window.scrollTo(0, Math.round(elementCoordinates.y));\r\n    }\r\n  }\r\n\r\n  handleFilterByGenre = (e) => {\r\n    let genre = \"\";\r\n    typeof e === \"string\" ? genre = e : genre = e.target.value\r\n\r\n    if (!this.state.genres.includes(genre)){\r\n      this.setState({\r\n        genres: [...this.state.genres, genre],\r\n        filterTriggered: true,\r\n        selectedDirector: ''\r\n      })\r\n    } else {\r\n        let genres = [...this.state.genres];\r\n        let index = genres.indexOf(genre);\r\n        genres.splice(index, 1);\r\n        this.setState({ \r\n          genres: genres,\r\n          filterTriggered: true,\r\n          selectedDirector: ''\r\n        })\r\n    }\r\n  }\r\n\r\n  handleToggleOverlay = (trailer) => {\r\n      this.setState({ \r\n        overlay: !this.state.overlay, \r\n        trailer: trailer \r\n      })\r\n  }\r\n\r\n  convertTime = (time) => {\r\n    let hours = time / 60;\r\n    if (time < 60){\r\n        return `${time}mins`;\r\n    } \r\n    let fullTime = ((time % 60) > 0) ? `${Math.floor(hours)}h ${(time % 60)}mins` : `${hours}h`;\r\n    return fullTime;\r\n  }\r\n\r\n  toggleFilmWatched = (id) => {\r\n    let updatedFilms = [...this.state.films];\r\n    updatedFilms.forEach(f => {\r\n      if (f.id === id){\r\n        f.watched = !f.watched;\r\n      }\r\n    });\r\n    this.setState({ films: updatedFilms, selectedDirector: '' })\r\n  }\r\n\r\n  resetProperty = (e) => {\r\n    if (e === \"director\"){\r\n      this.setState({ selectedDirector: ''})\r\n    }\r\n    if (e === \"year\"){\r\n      this.setState({ selectedYear: 0})\r\n    }\r\n  }\r\n    \r\n  render(){\r\n    const { filterTriggered, films, runtime, selectedYear, selectedDirector, oldestDecade, newestDecade, hideWatched, genres, trailer, overlay, activeFilter, mainGenres, extraGenres } = this.state;\r\n\r\n    let filteredFilms = films.filter(film => \r\n      film.runtime <= runtime\r\n      && (film.year >= oldestDecade && film.year <= newestDecade + 9) \r\n    )\r\n\r\n    if (genres.length){\r\n      filteredFilms = filteredFilms.filter(film => \r\n          film.genres.some(g => genres.includes(g))\r\n      )\r\n    }\r\n\r\n    let fullTime = this.convertTime(runtime);\r\n\r\n    // Specific filters\r\n    // These filters reset the regular ones to default and focus on an specific year or director\r\n    // if the user interacts with the other filters they're overridden\r\n    if (selectedYear !== 0){\r\n      filteredFilms = this.state.films.filter(f => f.year === selectedYear);\r\n    }\r\n\r\n    if (selectedDirector.length){\r\n      filteredFilms = this.state.films.filter(f => f.director.some(g => selectedDirector.includes(g)));\r\n    }\r\n\r\n    if (hideWatched){\r\n      filteredFilms = filteredFilms.filter(f => !f.watched);\r\n    }\r\n\r\n    return (\r\n      <div id=\"full-wrapper\">\r\n        <link\r\n            rel=\"stylesheet\"\r\n            href=\"https://maxcdn.bootstrapcdn.com/bootstrap/4.5.0/css/bootstrap.min.css\"\r\n            integrity=\"sha384-9aIt2nRpC12Uk9gS9baDl411NQApFmC26EwAOH8WgZl5MYYxFfc+NcPb1dKGj7Sk\"\r\n            crossOrigin=\"anonymous\"\r\n          />\r\n\r\n        {overlay &&  <FilmOverlay handleToggleOverlay={this.handleToggleOverlay} trailer={trailer} /> }\r\n\r\n        <Header />\r\n        <div className=\"container\">\r\n          <div className=\"row\">\r\n            <div className=\"col-md-12\">\r\n              <div className=\"main-filters\">\r\n                <h2 className=\"sub-header\">Filter by</h2>\r\n              </div>\r\n            </div>\r\n          </div>\r\n          <div className=\"row\">\r\n            <div className=\"col col-md-4\">\r\n            <button \r\n                className={`btn btn-sm btn-lg-3 btn-outline-secondary btn-filter ${activeFilter === 'runtime' ? 'active' : ''}`}\r\n                onClick={() => this.showFilter('runtime')}\r\n            >Runtime</button><button\r\n              className={`btn btn-sm btn-lg-3 btn-outline-secondary btn-filter ${activeFilter === 'genre' ? 'active' : ''}`}\r\n              onClick={() => this.showFilter('genre')}\r\n            >Genre</button><button\r\n              className={`btn btn-sm btn-lg-3 btn-outline-secondary btn-filter ${activeFilter === 'decade' ? 'active' : ''}`}\r\n            onClick={() => this.showFilter('decade')}\r\n          >Decade</button>\r\n            </div>\r\n          </div>\r\n          <Fragment>\r\n            {activeFilter === 'runtime' &&\r\n                <FilterByRuntime \r\n                  handleFilterByRuntime={this.handleFilterByRuntime}\r\n                  runtime={runtime}\r\n                  />\r\n            }\r\n            {activeFilter === 'genre' && \r\n                <FilterByGenre \r\n                  handleFilterByGenre={this.handleFilterByGenre} \r\n                  mainGenres={mainGenres}\r\n                  extraGenres={extraGenres}\r\n                  genres={genres}\r\n              />\r\n            }\r\n            {activeFilter === 'decade' &&  \r\n            <FilterByDecade \r\n              handleFilterByDecade={this.handleFilterByDecade}\r\n              oldestDecade={oldestDecade}\r\n              newestDecade={newestDecade}\r\n                />  }\r\n            <FilterByWatched \r\n              handleFilterByWatched={this.handleFilterByWatched}\r\n              hideWatched={hideWatched}  \r\n            />\r\n          </Fragment>\r\n          <div className=\"row\">\r\n              <div className=\"col-md-12\">\r\n                {filterTriggered &&\r\n                  <div id=\"search-labels\">\r\n                    <p className=\"search-labels__content\">\r\n                      <span className=\"search-labels__content__intro\">Looking for:</span>\r\n                      {genres.length > 0 && \r\n                      genres.map((g,index) => {\r\n                        return (\r\n                          <span key={index} className=\"search-labels__tag search-labels__tag--interactive\" onClick={() => this.handleFilterByGenre(g)}>{g}</span>\r\n                        )\r\n                      })\r\n                      }\r\n\r\n                      {((runtime !== 0) && (runtime < 181)) && \r\n                      <span className=\"search-labels__tag\">{fullTime} or less</span>\r\n                      }\r\n\r\n                      {((selectedYear === 0) && oldestDecade === newestDecade) && \r\n                        <span className=\"search-labels__tag\">{oldestDecade}s</span>\r\n                      }\r\n                      {((selectedYear === 0) && !(oldestDecade === newestDecade)) && \r\n                      <span className=\"search-labels__tag\">{oldestDecade}s - {newestDecade}s</span>\r\n                      }\r\n\r\n                      {selectedYear > 0 && <span className=\"search-labels__tag search-labels__tag--interactive\" onClick={() => this.resetProperty(\"year\")}>{selectedYear}</span> }\r\n                      {selectedDirector !== \"\" && <span className=\"search-labels__tag search-labels__tag--interactive\" onClick={() => this.resetProperty(\"director\")}>Directed by {selectedDirector}</span> }\r\n                      {hideWatched && <span className=\"search-labels__tag search-labels__tag--interactive\" onClick={() => this.handleFilterByWatched()}>unseen</span>}\r\n                    </p>\r\n                  </div>\r\n                }\r\n                  <div id=\"results\" ref={this.resultsRef}  onClick={() => this.scrollToSection(this.resultsRef)}>\r\n                    <p className={`film-results ${this.state.goToFilms ? \"return\" : \"\"}`}>\r\n                      {filteredFilms.length > 1 && \r\n                        <span>\r\n                            There are <strong>{filteredFilms.length}</strong> matches.\r\n                        </span>\r\n                        }\r\n                        {filteredFilms.length === 1 &&\r\n                        <span>\r\n                            There is <strong>1</strong> match.\r\n                        </span>\r\n                        }\r\n                        {!filteredFilms.length && \r\n                        <span>Sorry, there aren't any matches.</span>\r\n                        }\r\n                    </p>\r\n                  </div>\r\n              </div>\r\n          </div>\r\n          <div className=\"row product-list\">\r\n              {this.state.loading && \r\n                <Spinner animation=\"border\" role=\"status\">\r\n                  <span className=\"sr-only\">Loading...</span>\r\n                </Spinner>\r\n              }\r\n              {filteredFilms.map((film) => {\r\n                return (\r\n                  <FilmCard \r\n                      key={film.id}\r\n                      id={film.id}\r\n                      title={film.title}\r\n                      year={film.year}\r\n                      director={film.director}\r\n                      genres={film.genres}\r\n                      runtime={film.runtime}\r\n                      watched={film.watched}\r\n                      whereToWatch={film.whereToWatch}\r\n                      trailer={film.trailer}\r\n                      overlay={this.state.overlay}\r\n                      handleToggleOverlay={this.handleToggleOverlay}\r\n                      convertTime={this.convertTime}\r\n                      toggleFilmWatched={this.toggleFilmWatched}\r\n                      handleFilterByYear={this.handleFilterByYear}\r\n                      handleFilterByDirector={this.handleFilterByDirector}\r\n                      handleFilterByGenre={this.handleFilterByGenre}\r\n                  />\r\n                )                            \r\n              })}\r\n          </div>\r\n        </div>\r\n        <Footer />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}