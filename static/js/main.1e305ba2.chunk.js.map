{"version":3,"sources":["components/layout/Header.js","components/filters/FilterByWatched.js","components/filters/FilterByRuntime.js","components/films/FilmCard.js","components/films/FilmList.js","App.js","serviceWorker.js","index.js"],"names":["Header","className","Component","FilterByWatched","htmlFor","type","name","id","onChange","props","handleFilterByWatched","FilterByRuntime","e","handleFilterByRuntime","value","FilmCard","fullGenres","this","genres","join","fullDirector","director","length","fullTime","time","hours","Math","floor","convertTime","runtime","key","src","title","alt","year","href","whereToWatch","FilmList","state","films","loading","setState","axios","get","then","response","data","catch","error","results","filteredFilms","watched","filter","film","Spinner","animation","role","map","trailer","App","parseInt","target","theme","oldestDecade","newestDecade","rel","integrity","crossOrigin","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","console","message"],"mappings":"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","file":"static/js/main.1e305ba2.chunk.js","sourcesContent":["import React, { Component } from 'react'\r\n\r\nexport class Header extends Component {\r\n    render() {\r\n        return (\r\n            <header>\r\n                <h1 className=\"header-main\">What to Watch</h1>\r\n            </header>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Header\r\n","import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nclass FilterByWatched extends Component {\r\n    static propTypes = {\r\n        handleFilterByWatched: PropTypes.func.isRequired\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"row\">\r\n                <div className=\"col-md-12\">\r\n                    <div className=\"film-filter centered\">\r\n                        <label htmlFor=\"watched\">Hide films I have watched</label>\r\n                        <input \r\n                            type=\"checkbox\" \r\n                            name=\"watched\" \r\n                            id=\"watched\" \r\n                            onChange={() => this.props.handleFilterByWatched()} \r\n                        /> \r\n                    </div>  \r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default FilterByWatched;\r\n","import React, { Component } from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\nexport class FilterByRuntime extends Component {\r\n    static propTypes = {\r\n        handleFilterByRuntime: PropTypes.func.isRequired\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"row\">\r\n                <div className=\"col-md-12\">\r\n                    <div className=\"film-filter\">\r\n                    <div id=\"runtimes\">\r\n\t\t\t            <h2 className=\"filter-header\">How much time do you have?</h2>\t\r\n                            <div id=\"runtimes-filters\" onChange={(e) => this.props.handleFilterByRuntime(e)}>\r\n                                <div className=\"runtime-filter\">\r\n                                    <input \r\n                                        type=\"radio\" \r\n                                        className=\"film-times\" \r\n                                        name=\"runtime\" \r\n                                        value=\"90\"\r\n                                            />\r\n                                    <label htmlFor=\"runtime1\">1h 30min</label>\r\n                                </div><div className=\"runtime-filter\">\r\n                                <input \r\n                                    type=\"radio\" \r\n                                    className=\"film-times\" \r\n                                    name=\"runtime\" \r\n                                    value=\"120\"\r\n                                        />\r\n                                <label htmlFor=\"runtime1\">2h</label>\r\n                                </div><div className=\"runtime-filter\">\r\n                                <input \r\n                                    type=\"radio\" \r\n                                    className=\"film-times\" \r\n                                    name=\"runtime\" \r\n                                    value=\"150\"\r\n                                        />\r\n                                <label htmlFor=\"runtime1\">2h 30min</label>\r\n                                </div><div className=\"runtime-filter\">\r\n                                <input \r\n                                    type=\"radio\" \r\n                                    className=\"film-times\" \r\n                                    name=\"runtime\" \r\n                                    value=\"150\"\r\n                                        />\r\n                                <label htmlFor=\"runtime1\">3h</label>\r\n                                </div><div className=\"runtime-filter\">\r\n                                <input \r\n                                    type=\"radio\" \r\n                                    className=\"film-times\" \r\n                                    name=\"runtime\" \r\n                                    value=\"180\"\r\n                                        />\r\n                                <label htmlFor=\"runtime1\">All the time in world</label>\r\n                                </div>    \r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default FilterByRuntime\r\n","import React, { Fragment , Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nexport class FilmCard extends Component {\r\n    static propTypes = {\r\n        title: PropTypes.string.isRequired,\r\n        year: PropTypes.number.isRequired,\r\n        director: PropTypes.array.isRequired,\r\n        genres: PropTypes.array.isRequired,\r\n        whereToWatch: PropTypes.string.isRequired\r\n    }\r\n\r\n    render() {\r\n        const convertTime = (time) => {\r\n            let hours = time / 60;\r\n            if (time < 60){\r\n                return `${time}mins`;\r\n            } \r\n        \r\n            let fullTime = ((time % 60) > 0) ? `${Math.floor(hours)}h ${(time % 60)}mins` : `${hours}h`;\r\n            return fullTime;\r\n        }\r\n\r\n        let fullGenres = this.props.genres.join(\", \");\r\n        let fullDirector = (this.props.director.length > 1 ? this.props.director.join(\", \") : this.props.director);\r\n        let fullTime = convertTime(this.props.runtime);\r\n\r\n        return (\r\n            <Fragment>\r\n                <div className=\"col-md-4\" key={this.props.id}>\r\n                    <div className=\"card mb-4 box-shadow\">\r\n                        <img className=\"card-img-top\" src={`https://via.placeholder.com/336x255?text=${this.props.title}`} alt={this.props.title} />\r\n                        <div className=\"card-body\">\r\n                            <p className=\"card-text\">\r\n                                <span>Title: </span> {this.props.title}\r\n                            </p>\r\n                            <p className=\"card-text\">\r\n                                <span>Year: </span> {this.props.year}\r\n                            </p>\r\n                            <p className=\"card-text\">\r\n                                <span>Director: </span> {fullDirector}\r\n                            </p>\r\n                            <p className=\"card-text\">\r\n                                <span>Genres: </span> {fullGenres}\r\n                            </p>\r\n                            <p className=\"card-text\">\r\n                                <span>Runtime: </span> {fullTime}\r\n                            </p>\r\n                            <div className=\"d-flex justify-content-between align-items-center\">\r\n                                <div className=\"btn-group\">\r\n                                    <a href={`https://www.justwatch.com/uk/movie/${this.props.whereToWatch}`} className=\"btn btn-sm btn-outline-secondary\">Watch Film</a>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </div>    \r\n                </div>\r\n            </Fragment>\r\n        )\r\n    }\r\n}\r\n\r\nexport default FilmCard;","import React, { Fragment , Component } from 'react';\r\nimport axios from 'axios';\r\nimport Spinner from 'react-bootstrap/Spinner';\r\nimport FilmCard from './FilmCard';\r\nimport PropTypes from 'prop-types'\r\n\r\nexport class FilmList extends Component {\r\n    static propTypes = {\r\n        watched: PropTypes.bool.isRequired,\r\n        runtime: PropTypes.number.isRequired\r\n    }\r\n\r\n    state = {\r\n        films: [],\r\n        loading: false\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.setState({ loading: true }, () => {\r\n            axios.get('https://gist.githubusercontent.com/mklmng/fa894dc9c86dfed34e45063adcf1b73e/raw/aaebe9185fbb4b1ebcaf5343335168c9d2898f9a/Films.json')\r\n            .then(response => {\r\n                this.setState({ films: response.data, loading: false })\r\n            })\r\n            .catch(error => {\r\n                this.setState({ loading: false })\r\n            });\r\n        });\r\n    }   \r\n\r\n    render() {\r\n        let results = '';\r\n        let filteredFilms = this.state.films;\r\n\r\n        if (!this.props.watched){\r\n            filteredFilms = filteredFilms.filter(film => film.watched === this.props.watched && film.runtime <= this.props.runtime);\r\n        } else{\r\n            filteredFilms = filteredFilms.filter(film => film.runtime <= this.props.runtime);\r\n        }\r\n\r\n        if (filteredFilms.length > 0){\r\n            if (filteredFilms.length > 1){\r\n            results = `There are ${filteredFilms.length} matches.`; \r\n            } else {\r\n                results = `There is 1 match.`\r\n            }\r\n        } else {\r\n            results = `Sorry. There aren't any matches.`\r\n        }\r\n\r\n        return (\r\n            <Fragment>\r\n                <div className=\"row space-below\">\r\n                    <div className=\"col-md-12\">\r\n                        <div className=\"results\">\r\n                            {results}\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <div className=\"row\">\r\n                    {this.state.loading && <Spinner animation=\"border\" role=\"status\">\r\n                    <span className=\"sr-only\">Loading...</span>\r\n                    </Spinner>}\r\n                    {filteredFilms.map((film) => {\r\n                        return (\r\n                            <FilmCard \r\n                                key={film.id}\r\n                                id={film.id}\r\n                                title={film.title}\r\n                                year={film.year}\r\n                                director={film.director}\r\n                                genres={film.genres}\r\n                                runtime={film.runtime}\r\n                                whereToWatch={film.whereToWatch}\r\n                                trailer={film.trailer}\r\n                            />\r\n                        )                            \r\n                    })}\r\n                </div>\r\n            </Fragment>\r\n        )\r\n    } \r\n}\r\n\r\nexport default FilmList","import React, { Component, Fragment } from 'react';\nimport Header from './components/layout/Header';\nimport FilterByWatched from './components/filters/FilterByWatched';\nimport FilterByRuntime from './components/filters/FilterByRuntime';\nimport FilmList from './components/films/FilmList';\n\nimport './styles/styles.css';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = { \n        theme: 'day',\n        runtime: 9999,\n        oldestDecade: 1960,\n        newestDecade: 2010,\n        watched: true,\n        genres: []\n    };\n  }\n\n  handleFilterByWatched = () => this.setState({ watched: !this.state.watched });\n  handleFilterByRuntime = (e) => this.setState({ runtime:  parseInt(e.target.value) });    \n  \n  render(){\n    return (\n      <Fragment>\n        <link\n            rel=\"stylesheet\"\n            href=\"https://maxcdn.bootstrapcdn.com/bootstrap/4.5.0/css/bootstrap.min.css\"\n            integrity=\"sha384-9aIt2nRpC12Uk9gS9baDl411NQApFmC26EwAOH8WgZl5MYYxFfc+NcPb1dKGj7Sk\"\n            crossOrigin=\"anonymous\"\n          />\n        <Header />\n        <div className=\"container\">\n          <FilterByWatched handleFilterByWatched={this.handleFilterByWatched} />\n          <FilterByRuntime handleFilterByRuntime={this.handleFilterByRuntime} />\n          <FilmList \n            watched={this.state.watched}\n            runtime={this.state.runtime}\n            />\n        </div>\n      </Fragment>\n    );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}