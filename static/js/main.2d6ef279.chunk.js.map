{"version":3,"sources":["components/films/FilmOverlay.js","components/layout/Header.js","components/filters/FilterByWatched.js","components/layout/RadioButton.js","components/filters/FilterByRuntime.js","components/layout/Dropdown.js","components/filters/FilterByDecade.js","components/layout/Checkbox.js","components/filters/FilterByGenre.js","components/films/FilmCard.js","components/layout/Footer.js","App.js","serviceWorker.js","index.js"],"names":["FilmOverlay","id","onClick","props","handleToggleOverlay","className","title","this","trailer","width","height","src","frameborder","allow","allowfullscreen","Component","Header","onChange","switchTheme","htmlFor","nightTheme","type","name","FilterByWatched","handleFilterByWatched","RadioButton","runtimeId","value","runtime","runtimeText","FilterByRuntime","state","runtimes","e","handleFilterByRuntime","map","r","index","key","Dropdown","decade","FilterByDecade","decades","defaultValue","handleFilterByDecade","d","Checkbox","genre","FilterByGenre","expanded","genresRef","React","createRef","handleFilterByGenre","mainGenres","g","ref","setState","elementCoordinates","current","getBoundingClientRect","window","scrollTo","Math","round","y","toggleExpanded","extraGenres","FilmCard","fullGenres","genres","join","fullDirector","director","length","fullTime","time","hours","floor","convertTime","alt","year","href","whereToWatch","Footer","App","hideWatched","watched","parseInt","target","selectedIndex","newestDecade","oldestDecade","document","querySelector","scrollToSection","goToFilms","includes","indexOf","splice","overlay","films","loading","resultsRef","axios","get","then","response","maxRuntime","max","apply","data","film","filmYears","min","forEach","push","sort","catch","error","filteredFilms","filter","some","rel","integrity","crossOrigin","Spinner","animation","role","Boolean","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","registration","unregister","console","message"],"mappings":"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","file":"static/js/main.2d6ef279.chunk.js","sourcesContent":["import React, { Component } from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\nexport class FilmOverlay extends Component {\r\n    static propTypes = {\r\n        handleToggleOverlay: PropTypes.func.isRequired,\r\n        trailer: PropTypes.string.isRequired\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div id=\"overlay\" onClick={() => this.props.handleToggleOverlay()}>\r\n              <div className=\"overlay__wrapper\">\r\n                <div className=\"overlay__wrapper__video-container\">\r\n                    <iframe \r\n                        title={this.props.trailer}\r\n                        className=\"overlay__wrapper__video-container__video\" \r\n                        width=\"560\" \r\n                        height=\"315\" \r\n                        src={`https://www.youtube-nocookie.com/embed/${this.props.trailer}`} \r\n                        frameborder=\"0\" \r\n                        allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" \r\n                        allowfullscreen=\"\">\r\n                    </iframe>\r\n                </div>\r\n              </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default FilmOverlay\r\n","import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nclass Header extends Component {\r\n    static propTypes = {\r\n        nightTheme: PropTypes.bool.isRequired,\r\n        switchTheme: PropTypes.func.isRequired\r\n    }    \r\n\r\n    render() {\r\n        return (\r\n            <header>\r\n                <h1 className=\"header-main\">What to Watch</h1>\r\n                <div id=\"theme-switcher\" onChange={() => this.props.switchTheme()}>\r\n\t\t\t        <label htmlFor=\"theme\">\r\n                        {this.props.nightTheme && \"Night \" }    \r\n                        {!this.props.nightTheme && \"Day \" }\r\n                        theme \r\n                    </label>\r\n\t\t\t        <input type=\"checkbox\" name=\"theme\" id=\"theme\" />\r\n\t\t        </div>\r\n            </header>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Header;","import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nclass FilterByWatched extends Component {\r\n    static propTypes = {\r\n        handleFilterByWatched: PropTypes.func.isRequired\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"row\">\r\n                <div className=\"col-md-12\">\r\n                    <div id=\"filter-watched\" className=\"film-filter centered\">\r\n                        <label htmlFor=\"watched\" className=\"space-right-1\">Hide films I have watched</label>\r\n                        <input \r\n                            type=\"checkbox\" \r\n                            name=\"watched\" \r\n                            id=\"watched\" \r\n                            onChange={() => this.props.handleFilterByWatched()} \r\n                        /> \r\n                    </div>  \r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default FilterByWatched;\r\n","import React, { Component } from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\nexport class RadioButton extends Component {\r\n    static propTypes = {\r\n        runtime: PropTypes.string.isRequired,\r\n        runtimeText: PropTypes.string.isRequired,\r\n        runtimeId: PropTypes.string.isRequired\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"runtime-filter\">\r\n                <input \r\n                    type=\"radio\" \r\n                    className=\"film-times\" \r\n                    name=\"runtime\" \r\n                    id={this.props.runtimeId}\r\n                    value={this.props.runtime}\r\n                        />\r\n                <label htmlFor={this.props.runtimeId}>{this.props.runtimeText}</label>\r\n            </div>)\r\n    }\r\n}\r\n\r\nexport default RadioButton\r\n","import React, { Component } from 'react'\r\nimport RadioButton from '../layout/RadioButton'\r\nimport PropTypes from 'prop-types'\r\n\r\nclass FilterByRuntime extends Component {\r\n    static propTypes = {\r\n        handleFilterByRuntime: PropTypes.func.isRequired\r\n    }\r\n\r\n    state = {\r\n        runtimes: [\r\n            {\r\n                runtime: \"90\",\r\n                runtimeId: \"runtime-90\",\r\n                runtimeText: \"1h 30min\"\r\n            },\r\n            {\r\n                runtime: \"120\",\r\n                runtimeId: \"runtime-120\",\r\n                runtimeText: \"2h\"\r\n            },\r\n            {\r\n                runtime: \"150\",\r\n                runtimeId: \"runtime-150\",\r\n                runtimeText: \"2h 30min\"\r\n            },\r\n            {\r\n                runtime: \"180\",\r\n                runtimeId: \"runtime-180\",\r\n                runtimeText: \"3h\"\r\n            },\r\n            {\r\n                runtime: \"9999\",\r\n                runtimeId: \"runtime-all\",\r\n                runtimeText: \"All the time in world\"\r\n            }\r\n        ]\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"row\">\r\n                <div className=\"col-md-12\">\r\n                    <div id=\"filter-runtime\" className=\"film-filter\">\r\n                        <div id=\"runtimes\">\r\n                            <h2 className=\"filter-header\">How much time do you have?</h2>\t\r\n                                <div id=\"runtimes-filters\" onChange={(e) => this.props.handleFilterByRuntime(e)}>\r\n                                    {this.state.runtimes.map((r, index) => {\r\n                                        return (\r\n                                            <RadioButton key={index}\r\n                                                runtime={r.runtime}\r\n                                                runtimeId={r.runtimeId}\r\n                                                runtimeText={r.runtimeText}\r\n                                            />\r\n                                            )                            \r\n                                    })}  \r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default FilterByRuntime\r\n","import React, { Component } from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\nclass Dropdown extends Component {\r\n    static propTypes = {\r\n        decade: PropTypes.number.isRequired\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <option value={this.props.decade}>{this.props.decade}</option>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Dropdown\r\n","import React, { Component } from \"react\";\r\nimport Dropdown from '../layout/Dropdown';\r\nimport PropTypes from \"prop-types\";\r\n\r\nclass FilterByDecade extends Component {\r\n  static propTypes = {\r\n    handleFilterByDecade: PropTypes.func.isRequired,\r\n  };\r\n\r\n  state = { decades: [ 1960, 1970, 1980, 1990, 2000 , 2010 ] }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"row\">\r\n        <div className=\"col-md-12\">\r\n            <div id=\"filter-decades\" className=\"film-filter\">\r\n              <h2 className=\"filter-header\">Which era are you interested on?</h2>\r\n            <div className=\"decades-filters\">\r\n              <label htmlFor=\"oldest-decade\" className=\"decades-filters__label\">From</label>\r\n              <select name=\"decades\" id=\"oldest-decade\" defaultValue=\"1960\" onChange={(e) => this.props.handleFilterByDecade(e)}>\r\n                {this.state.decades.map((d, index) => {\r\n                  return (\r\n                      <Dropdown key={index}\r\n                          decade={d}\r\n                      />\r\n                      )                            \r\n                  })\r\n                }  \r\n              </select>\r\n              <label htmlFor=\"newest-decade\" className=\"decades-filters__label\">To</label>\r\n              <select name=\"decades\" id=\"newest-decade\" defaultValue=\"2010\" onChange={(e) => this.props.handleFilterByDecade(e)}>\r\n                {this.state.decades.map((d, index) => {\r\n                    return (\r\n                        <Dropdown key={index}\r\n                            decade={d}\r\n                        />\r\n                        )                            \r\n                    })\r\n                }\r\n              </select>\r\n              </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default FilterByDecade;\r\n","import React, { Component } from 'react'\r\nimport PropTypes from 'prop-types';\r\n\r\nclass Checkbox extends Component {\r\n    static propTypes = {\r\n        genre: PropTypes.string.isRequired\r\n    }   \r\n\r\n    render() {\r\n        return (\r\n            <div className=\"genre-selector\">\r\n                <input id={this.props.genre} type=\"checkbox\" className=\"genre-items\" value={this.props.genre} />\r\n                <label htmlFor={this.props.genre}>{this.props.genre}</label>    \r\n            </div>)\r\n    }\r\n}\r\n\r\nexport default Checkbox\r\n","import React, { Component } from 'react';\r\nimport Checkbox from '../layout/Checkbox';\r\nimport PropTypes from 'prop-types';\r\n\r\nclass FilterByGenre extends Component {\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            expanded: false\r\n        }\r\n\r\n        this.genresRef = React.createRef();  \r\n    }\r\n\r\n    static propTypes = {\r\n        handleFilterByGenre: PropTypes.func.isRequired,\r\n        mainGenres: PropTypes.array.isRequired,\r\n        extraGenres: PropTypes.array.isRequired\r\n    }\r\n\r\n    render() {\r\n        const toggleExpanded = (ref) => {\r\n            this.setState({ expanded: !this.state.expanded });\r\n            let elementCoordinates = ref.current.getBoundingClientRect();\r\n            window.scrollTo(0, Math.round(elementCoordinates.y));\r\n        }\r\n\r\n        return (\r\n            <div className=\"row\">\r\n                <div className=\"col-md-12\">\r\n                    <div id=\"filter-genres\" className=\"film-filter\">\r\n                        <h2 className=\"filter-header\">What genres do you like?</h2>\t\r\n                        <div id=\"main-genres\" onChange={(e) => this.props.handleFilterByGenre(e)}>\r\n                            {this.props.mainGenres.map((g, index) => {\r\n                            return (\r\n                                <Checkbox key={index} genre={g} />\r\n                            )                            \r\n                             })}\r\n                        </div>\r\n                        <span className={`cta-expand ${this.state.expanded ? 'expanded' : ''}`}\r\n                            onClick={() => toggleExpanded(this.genresRef)}>\r\n                            See all genres\r\n                        </span>\r\n                        <div id=\"extra-genres\" ref={this.genresRef} onChange={(e) => this.props.handleFilterByGenre(e)}>\r\n                            {this.props.extraGenres.map((g, index) => {\r\n                                return (\r\n                                    <Checkbox key={index} genre={g} />\r\n                                )                            \r\n                                })\r\n                            }\r\n                        </div>\r\n                    </div>        \t\t\r\n                </div>    \r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default FilterByGenre","import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nclass FilmCard extends Component {\r\n    static propTypes = {\r\n        title: PropTypes.string.isRequired,\r\n        year: PropTypes.number.isRequired,\r\n        director: PropTypes.array.isRequired,\r\n        genres: PropTypes.array.isRequired,\r\n        whereToWatch: PropTypes.string.isRequired,\r\n        handleToggleOverlay: PropTypes.func.isRequired,\r\n        trailer: PropTypes.string.isRequired\r\n    }\r\n\r\n    render() {\r\n        const convertTime = (time) => {\r\n            let hours = time / 60;\r\n            if (time < 60){\r\n                return `${time}mins`;\r\n            } \r\n            let fullTime = ((time % 60) > 0) ? `${Math.floor(hours)}h ${(time % 60)}mins` : `${hours}h`;\r\n            return fullTime;\r\n        }\r\n\r\n        let fullGenres = this.props.genres.join(\", \");\r\n        let fullDirector = (this.props.director.length > 1 ? this.props.director.join(\", \") : this.props.director);\r\n        let fullTime = convertTime(this.props.runtime);\r\n\r\n        return (\r\n            <div className=\"col-md-4\" key={this.props.id}>\r\n                <div className=\"card mb-4 box-shadow\">\r\n                    <img className=\"card-img-top\" src={`https://via.placeholder.com/336x255?text=${this.props.title}`} alt={this.props.title} />\r\n                    <div className=\"card-body\">                            \r\n                        <p className=\"card-text\">\r\n                            <span>Title: </span> {this.props.title}\r\n                        </p>\r\n                        <p className=\"card-text\">\r\n                            <span>Year: </span> {this.props.year}\r\n                        </p>\r\n                        <p className=\"card-text\">\r\n                            <span>Director: </span> {fullDirector}\r\n                        </p>\r\n                        <p className=\"card-text\">\r\n                            <span>Genres: </span> {fullGenres}\r\n                        </p>\r\n                        <p className=\"card-text\">\r\n                            <span>Runtime: </span> {fullTime}\r\n                        </p>\r\n                        <div className=\"d-flex justify-content-between align-items-center\">\r\n                            <div className=\"btn-group\">\r\n                                <a href={`https://www.justwatch.com/uk/movie/${this.props.whereToWatch}`} className=\"btn btn-sm btn-outline-secondary\">Watch Film</a>\r\n                                <button type=\"button\" className=\"btn btn-sm btn-outline-secondary\" onClick={() => this.props.handleToggleOverlay(this.props.trailer)}>Watch trailer</button>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>    \r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default FilmCard;","import React, { Component } from 'react'\r\n\r\nclass Footer extends Component {\r\n\r\n    render() {\r\n        return (\r\n            <footer>\r\n                <small>\r\n                    Work in progress. New features coming soon.\r\n                </small>\r\n            </footer>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Footer","import React, { Component, Fragment } from 'react';\nimport axios from 'axios';\nimport FilmOverlay from './components/films/FilmOverlay';\nimport Header from './components/layout/Header';\nimport FilterByWatched from './components/filters/FilterByWatched';\nimport FilterByRuntime from './components/filters/FilterByRuntime';\nimport FilterByDecade from './components/filters/FilterByDecade';\nimport FilterByGenre from './components/filters/FilterByGenre';\nimport Spinner from 'react-bootstrap/Spinner';\nimport FilmCard from './components/films/FilmCard';\nimport Footer from './components/layout/Footer';\n\nimport './styles/styles.css';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = { \n        nightTheme: false,\n        runtime: 0,\n        oldestDecade: 0,\n        newestDecade: 0,\n        hideWatched: false,\n        genres: [],\n        mainGenres: [\"action\" , \"comedy\" , \"drama\" , \"horror\" , \"sci-fi\"],\n        extraGenres: [],\n        films: [],\n        loading: true,\n        overlay: false,\n        trailer: \"\",\n        goToFilms: false\n    };\n\n    this.resultsRef = React.createRef();  \n  }\n  \n  componentDidMount() {\n    this.setState({ loading: true }, () => {\n        axios.get('https://gist.githubusercontent.com/mklmng/fa894dc9c86dfed34e45063adcf1b73e/raw/eb77422572bbf7bee0ebaf86c02eb1fe99730195/Films.json')\n        .then(response => {\n            let maxRuntime = parseInt(Math.max.apply(0, response.data.map(film => film.runtime)));  \n            let filmYears = response.data.map(film => film.year);\n            let oldestDecade = Math.floor(Math.min.apply(0, filmYears) / 10) * 10;\n            let newestDecade = Math.floor(Math.max.apply(0, filmYears) / 10) * 10;\n            let extraGenres = [...this.state.extraGenres];\n\n            if (!extraGenres.length){\n              response.data.forEach(film => {\n                film.genres.forEach(genre => {\n                  if (!extraGenres.includes(genre) && !this.state.mainGenres.includes(genre)){\n                    extraGenres.push(genre);\n                  }\n                });\n              })\n              extraGenres.sort();\n            }          \n\n            this.setState({ \n              loading: false,\n              runtime: maxRuntime,\n              oldestDecade: oldestDecade,\n              newestDecade: newestDecade,\n              extraGenres: extraGenres,\n              films: response.data\n            })\n        })\n        .catch(error => {\n            this.setState({ loading: false })\n        });\n    });\n  }   \n\n  switchTheme = () => this.setState({nightTheme: !this.state.nightTheme });  \n\n  handleFilterByWatched = () => this.setState({ hideWatched: !this.state.watched });\n  handleFilterByRuntime = e => this.setState({ runtime: parseInt(e.target.value) }); \n  handleFilterByDecade = (e) => {\n    const decade = parseInt(e.target.value);\n    const selectedIndex = e.target.selectedIndex;\n\n    if (e.target.id === \"oldest-decade\"){\n      if (decade > this.state.newestDecade){\n        this.setState({ \n          oldestDecade: decade,\n          newestDecade: decade\n        })\n        document.querySelector(\"#newest-decade\").selectedIndex = selectedIndex;\n      } else {\n        this.setState({\n          oldestDecade: decade,\n        })\n      }\n    }\n\n    if (e.target.id === \"newest-decade\"){\n      if (e.target.value >= this.state.oldestDecade){\n        this.setState({ \n          newestDecade: decade\n        })\n      } else {\n        this.setState({\n          newestDecade: this.state.oldestDecade\n        })\n        document.querySelector(\"#newest-decade\").selectedIndex = document.querySelector(\"#oldest-decade\").selectedIndex;\n      }\n    }\n  }   \n\n  scrollToSection = (ref) => {\n    this.setState({ goToFilms: !this.state.goToFilms });\n\n    if (this.state.goToFilms){\n        window.scrollTo(0,0)\n      } else {\n        let elementCoordinates = ref.current.getBoundingClientRect();\n        window.scrollTo(0, Math.round(elementCoordinates.y));\n    }\n  }\n\n  handleFilterByGenre = (e) => {\n    let genre = e.target.value;\n\n    if (!this.state.genres.includes(genre)){\n      this.setState({\n        genres: [...this.state.genres, genre]\n      })\n    } else {\n        let genres = [...this.state.genres];\n        let index = genres.indexOf(e.target.value);\n        genres.splice(index, 1);\n        this.setState({ genres: genres })\n    }\n  }\n\n  handleToggleOverlay = (trailer) => {\n      this.setState({ overlay: !this.state.overlay, trailer: trailer })\n  }\n  \n  render(){\n    let filteredFilms = this.state.films.filter(film => \n      film.runtime <= this.state.runtime\n      && film.runtime <= this.state.runtime\n      && (film.year >= this.state.oldestDecade && film.year <= this.state.newestDecade + 9) \n    )\n\n    if (this.state.hideWatched){\n        filteredFilms = filteredFilms.filter(film => \n            film.watched === !this.state.hideWatched \n        )               \n    } \n\n    if (this.state.genres.length){\n        filteredFilms = filteredFilms.filter(film => \n            film.genres.some(g => this.state.genres.includes(g))\n        )\n    }\n\n    return (\n      <div id=\"full-wrapper\" className={`${this.state.nightTheme && 'dark'}`}>\n        <link\n            rel=\"stylesheet\"\n            href=\"https://maxcdn.bootstrapcdn.com/bootstrap/4.5.0/css/bootstrap.min.css\"\n            integrity=\"sha384-9aIt2nRpC12Uk9gS9baDl411NQApFmC26EwAOH8WgZl5MYYxFfc+NcPb1dKGj7Sk\"\n            crossOrigin=\"anonymous\"\n          />\n\n        {this.state.overlay &&  <FilmOverlay handleToggleOverlay={this.handleToggleOverlay} trailer={this.state.trailer} /> }\n\n        <Header\n          nightTheme={this.state.nightTheme}\n          switchTheme={this.switchTheme}\n        />\n        <div className=\"container\">\n          {(this.state.films.length && this.state.extraGenres.length) && \n          <Fragment>\n            <FilterByWatched handleFilterByWatched={this.handleFilterByWatched} />\n            <FilterByRuntime handleFilterByRuntime={this.handleFilterByRuntime} />\n            <FilterByGenre \n              handleFilterByGenre={this.handleFilterByGenre} \n              mainGenres={this.state.mainGenres}\n              extraGenres={this.state.extraGenres}\n            />\n            <FilterByDecade handleFilterByDecade={this.handleFilterByDecade} />  \n          </Fragment>\n          }\n\n          <div className=\"row\">\n              <div className=\"col-md-12\">\n                  <div id=\"results\" ref={this.resultsRef}  onClick={() => this.scrollToSection(this.resultsRef)}>\n                    <p className={`film-results ${this.state.goToFilms ? \"return\" : \"\"}`}>\n                      {filteredFilms.length > 1 && \n                        <span>\n                            There are <strong>{filteredFilms.length}</strong> matches.\n                        </span>\n                        }\n                        {filteredFilms.length === 1 &&\n                        <span>\n                            There is <strong>1</strong> match.\n                        </span>\n                        }\n                        {!filteredFilms.length && \n                        <span>Sorry, there aren't any matches.</span>\n                        }\n                    </p>\n                  </div>\n              </div>\n          </div>\n          <div className=\"row\">\n              {this.state.loading && \n                <Spinner animation=\"border\" role=\"status\">\n                  <span className=\"sr-only\">Loading...</span>\n                </Spinner>\n              }\n              {filteredFilms.map((film) => {\n                return (\n                  <FilmCard \n                      key={film.id}\n                      id={film.id}\n                      title={film.title}\n                      year={film.year}\n                      director={film.director}\n                      genres={film.genres}\n                      runtime={film.runtime}\n                      whereToWatch={film.whereToWatch}\n                      trailer={film.trailer}\n                      overlay={this.state.overlay}\n                      handleToggleOverlay={this.handleToggleOverlay}\n                  />\n                )                            \n              })}\n          </div>\n        </div>\n        <Footer />\n      </div>\n    );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}